#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Generador de Proyectos Acad√©micos - Versi√≥n Avanzada
Crea documentos Word con opciones personalizables y formato base
"""

import customtkinter as ctk
from tkinter import messagebox, filedialog
from docx import Document
from docx.shared import Inches, Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH, WD_LINE_SPACING
from docx.enum.style import WD_STYLE_TYPE
import re
import os
import json
from datetime import datetime
import threading
from copy import deepcopy

# Configuraci√≥n del tema
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

class ProyectoAcademicoGenerator:
    def __init__(self):
        self.root = ctk.CTk()
        self.root.title("üéì Generador de Proyectos Acad√©micos - Versi√≥n Avanzada")
        self.root.geometry("1200x700")
        
        # Hacer la ventana redimensionable
        self.root.minsize(1000, 600)
        
        # Variables para almacenar la informaci√≥n
        self.proyecto_data = {}
        self.referencias = []
        self.documento_base = None
        self.usar_formato_base = False
        
        # Secciones din√°micas - estructura inicial
        self.secciones_disponibles = self.get_secciones_iniciales()
        self.secciones_activas = list(self.secciones_disponibles.keys())
        self.content_texts = {}
        
        # Configuraci√≥n de formato
        self.formato_config = {
            'fuente_texto': 'Times New Roman',
            'tama√±o_texto': 12,
            'fuente_titulo': 'Times New Roman', 
            'tama√±o_titulo': 14,
            'interlineado': 2.0,
            'margen': 2.54,
            'justificado': True,
            'sangria': True
        }
        
        self.setup_ui()
        self.mostrar_bienvenida()
    
    def get_secciones_iniciales(self):
        """Define las secciones disponibles inicialmente"""
        return {
            "resumen": {
                "titulo": "üìÑ Resumen", 
                "instruccion": "Resumen ejecutivo del proyecto (150-300 palabras)",
                "requerida": False,
                "capitulo": False
            },
            "introduccion": {
                "titulo": "üîç Introducci√≥n", 
                "instruccion": "Presenta el tema, contexto e importancia",
                "requerida": True,
                "capitulo": False
            },
            "capitulo1": {
                "titulo": "üìñ CAP√çTULO I", 
                "instruccion": "T√≠tulo de cap√≠tulo",
                "requerida": False,
                "capitulo": True
            },
            "planteamiento": {
                "titulo": "‚ùì Planteamiento del Problema", 
                "instruccion": "Define el problema a investigar",
                "requerida": True,
                "capitulo": False
            },
            "preguntas": {
                "titulo": "‚ùî Preguntas de Investigaci√≥n", 
                "instruccion": "Pregunta general y espec√≠ficas",
                "requerida": True,
                "capitulo": False
            },
            "delimitaciones": {
                "titulo": "üìè Delimitaciones", 
                "instruccion": "L√≠mites del estudio (temporal, espacial, conceptual)",
                "requerida": False,
                "capitulo": False
            },
            "justificacion": {
                "titulo": "üí° Justificaci√≥n", 
                "instruccion": "Explica por qu√© es importante investigar",
                "requerida": True,
                "capitulo": False
            },
            "objetivos": {
                "titulo": "üéØ Objetivos", 
                "instruccion": "General y espec√≠ficos (verbos en infinitivo)",
                "requerida": True,
                "capitulo": False
            },
            "capitulo2": {
                "titulo": "üìö CAP√çTULO II - ESTADO DEL ARTE", 
                "instruccion": "T√≠tulo de cap√≠tulo",
                "requerida": False,
                "capitulo": True
            },
            "marco_teorico": {
                "titulo": "üìñ Marco Te√≥rico", 
                "instruccion": "Base te√≥rica y antecedentes (USA CITAS)",
                "requerida": True,
                "capitulo": False
            },
            "capitulo3": {
                "titulo": "üî¨ CAP√çTULO III", 
                "instruccion": "T√≠tulo de cap√≠tulo",
                "requerida": False,
                "capitulo": True
            },
            "metodologia": {
                "titulo": "‚öôÔ∏è Marco Metodol√≥gico", 
                "instruccion": "Tipo de estudio y t√©cnicas de recolecci√≥n",
                "requerida": True,
                "capitulo": False
            },
            "capitulo4": {
                "titulo": "üõ†Ô∏è CAP√çTULO IV - DESARROLLO", 
                "instruccion": "T√≠tulo de cap√≠tulo",
                "requerida": False,
                "capitulo": True
            },
            "desarrollo": {
                "titulo": "‚öôÔ∏è Desarrollo", 
                "instruccion": "Proceso de investigaci√≥n paso a paso",
                "requerida": False,
                "capitulo": False
            },
            "capitulo5": {
                "titulo": "üìä CAP√çTULO V - AN√ÅLISIS DE DATOS", 
                "instruccion": "T√≠tulo de cap√≠tulo",
                "requerida": False,
                "capitulo": True
            },
            "resultados": {
                "titulo": "üìä Resultados", 
                "instruccion": "Datos obtenidos (gr√°ficos, tablas)",
                "requerida": False,
                "capitulo": False
            },
            "analisis_datos": {
                "titulo": "üìà An√°lisis de Datos", 
                "instruccion": "Interpretaci√≥n de resultados",
                "requerida": False,
                "capitulo": False
            },
            "capitulo6": {
                "titulo": "üí¨ CAP√çTULO VI", 
                "instruccion": "T√≠tulo de cap√≠tulo",
                "requerida": False,
                "capitulo": True
            },
            "discusion": {
                "titulo": "üí¨ Discusi√≥n", 
                "instruccion": "Confronta resultados con teor√≠a",
                "requerida": False,
                "capitulo": False
            },
            "conclusiones": {
                "titulo": "‚úÖ Conclusiones", 
                "instruccion": "Hallazgos principales y respuestas a objetivos",
                "requerida": True,
                "capitulo": False
            }
        }
    
    def setup_ui(self):
        """Configura la interfaz de usuario moderna con mejor gesti√≥n de espacio"""
        # Frame principal con scroll
        main_container = ctk.CTkFrame(self.root, corner_radius=0)
        main_container.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Header con t√≠tulo y botones principales
        header_frame = ctk.CTkFrame(main_container, height=120, corner_radius=10)
        header_frame.pack(fill="x", padx=10, pady=(10, 5))
        header_frame.pack_propagate(False)
        
        # T√≠tulo en header
        title_label = ctk.CTkLabel(
            header_frame, 
            text="üéì Generador de Proyectos Acad√©micos",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        title_label.pack(pady=(10, 5))
        
        # Botones principales en header
        button_frame = ctk.CTkFrame(header_frame, fg_color="transparent")
        button_frame.pack(fill="x", padx=20, pady=(5, 10))
        
        # Primera fila de botones
        btn_row1 = ctk.CTkFrame(button_frame, fg_color="transparent")
        btn_row1.pack(fill="x", pady=(0, 5))
        
        help_btn = ctk.CTkButton(
            btn_row1, text="üìñ Gu√≠a", command=self.mostrar_instrucciones,
            width=80, height=30, font=ctk.CTkFont(size=11, weight="bold")
        )
        help_btn.pack(side="left", padx=(0, 5))
        
        template_btn = ctk.CTkButton(
            btn_row1, text="üìã Plantilla", command=self.cargar_documento_base,
            width=90, height=30, font=ctk.CTkFont(size=11, weight="bold"),
            fg_color="purple", hover_color="darkviolet"
        )
        template_btn.pack(side="left", padx=(0, 5))
        
        # Botones de proyecto
        save_btn = ctk.CTkButton(
            btn_row1, text="üíæ Guardar", command=self.guardar_proyecto,
            width=80, height=30, font=ctk.CTkFont(size=11, weight="bold"),
            fg_color="darkgreen", hover_color="green"
        )
        save_btn.pack(side="left", padx=(0, 5))
        
        load_btn = ctk.CTkButton(
            btn_row1, text="üìÇ Cargar", command=self.cargar_proyecto,
            width=80, height=30, font=ctk.CTkFont(size=11, weight="bold"),
            fg_color="darkblue", hover_color="blue"
        )
        load_btn.pack(side="left", padx=(0, 5))
        
        # Estad√≠sticas en tiempo real
        self.stats_label = ctk.CTkLabel(
            btn_row1, text="üìä Palabras: 0 | Secciones: 0/13 | Referencias: 0",
            font=ctk.CTkFont(size=10), text_color="gray70"
        )
        self.stats_label.pack(side="right", padx=(5, 0))
        
        # Segunda fila de botones
        btn_row2 = ctk.CTkFrame(button_frame, fg_color="transparent")
        btn_row2.pack(fill="x")
        
        # Botones de im√°genes
        images_btn = ctk.CTkButton(
            btn_row2, text="üñºÔ∏è Im√°genes", command=self.gestionar_imagenes,
            width=90, height=30, font=ctk.CTkFont(size=11, weight="bold"),
            fg_color="darkblue", hover_color="navy"
        )
        images_btn.pack(side="left", padx=(0, 5))
        
        export_btn = ctk.CTkButton(
            btn_row2, text="üì§ Exportar Config", command=self.exportar_configuracion,
            width=110, height=30, font=ctk.CTkFont(size=11, weight="bold"),
            fg_color="darkorange", hover_color="orange"
        )
        export_btn.pack(side="left", padx=(0, 5))
        
        validate_btn = ctk.CTkButton(
            btn_row2, text="üîç Validar", command=self.validar_proyecto,
            width=80, height=30, font=ctk.CTkFont(size=11, weight="bold"),
            fg_color="orange", hover_color="darkorange"
        )
        validate_btn.pack(side="left", padx=(0, 5))
        
        generate_btn = ctk.CTkButton(
            btn_row2, text="üìÑ Generar Documento", command=self.generar_documento_async,
            width=140, height=30, font=ctk.CTkFont(size=11, weight="bold"),
            fg_color="green", hover_color="darkgreen"
        )
        # Tercera fila de botones avanzados
        btn_row3 = ctk.CTkFrame(button_frame, fg_color="transparent")
        btn_row3.pack(fill="x", pady=(5, 0))
        
        # Botones de plantillas y temas
        template_mgr_btn = ctk.CTkButton(
            btn_row3, text="üìã Plantillas", command=self.gestionar_plantillas,
            width=90, height=30, font=ctk.CTkFont(size=11, weight="bold"),
            fg_color="darkviolet", hover_color="purple"
        )
        template_mgr_btn.pack(side="left", padx=(0, 5))
        
        theme_btn = ctk.CTkButton(
            btn_row3, text="üé® Temas", command=self.cambiar_tema,
            width=80, height=30, font=ctk.CTkFont(size=11, weight="bold"),
            fg_color="darkcyan", hover_color="cyan"
        )
        theme_btn.pack(side="left", padx=(0, 5))
        
        preview_btn = ctk.CTkButton(
            btn_row3, text="üëÅÔ∏è Vista Previa", command=self.vista_previa_documento,
            width=100, height=30, font=ctk.CTkFont(size=11, weight="bold"),
            fg_color="darkslategray", hover_color="slategray"
        )
        preview_btn.pack(side="left", padx=(0, 5))
        
        backup_btn = ctk.CTkButton(
            btn_row3, text="üõ°Ô∏è Respaldos", command=self.gestionar_respaldos,
            width=90, height=30, font=ctk.CTkFont(size=11, weight="bold"),
            fg_color="darkgoldenrod", hover_color="goldenrod"
        )
        backup_btn.pack(side="left", padx=(0, 5))
        
        # Selector de idioma y configuraci√≥n avanzada
        settings_btn = ctk.CTkButton(
            btn_row3, text="‚öôÔ∏è Config Avanzada", command=self.configuracion_avanzada,
            width=120, height=30, font=ctk.CTkFont(size=11, weight="bold"),
            fg_color="dimgray", hover_color="gray"
        )
        settings_btn.pack(side="right", padx=(5, 0))
        
        # Frame contenedor para tabs con scroll
        content_container = ctk.CTkFrame(main_container, corner_radius=10)
        content_container.pack(fill="both", expand=True, padx=10, pady=(5, 10))
        
        # Tabview principal con altura reducida
        self.tabview = ctk.CTkTabview(content_container, width=1100, height=520)
        self.tabview.pack(expand=True, fill="both", padx=10, pady=10)
        
        # Crear pesta√±as
        self.setup_info_general()
        self.setup_contenido_dinamico()
        self.setup_citas_referencias()
        self.setup_formato_avanzado()
        self.setup_generacion()
    
    def setup_info_general(self):
        """Pesta√±a de informaci√≥n general mejorada y m√°s compacta"""
        tab = self.tabview.add("üìã Informaci√≥n General")
        
        # Scroll frame con altura reducida
        scroll_frame = ctk.CTkScrollableFrame(tab, label_text="Datos del Proyecto", height=400)
        scroll_frame.pack(fill="both", expand=True, padx=15, pady=15)
        
        # Toggle para usar formato base - m√°s compacto
        base_frame = ctk.CTkFrame(scroll_frame, fg_color="darkblue", corner_radius=8)
        base_frame.pack(fill="x", pady=(0, 15))
        
        ctk.CTkLabel(
            base_frame, text="üìã Formato Base",
            font=ctk.CTkFont(size=14, weight="bold"), text_color="white"
        ).pack(pady=(10, 5))
        
        self.usar_base_var = ctk.CTkCheckBox(
            base_frame, text="Usar plantilla base (3¬∫ A√ëO)",
            font=ctk.CTkFont(size=12), command=self.toggle_formato_base
        )
        self.usar_base_var.pack(pady=(0, 10))
        
        # Campos organizados en filas de 2 columnas usando pack
        campos = [
            ("Instituci√≥n Educativa", "institucion", "Colegio Privado Divina Esperanza"),
            ("T√≠tulo del Proyecto", "titulo", "Ingrese el t√≠tulo de su investigaci√≥n"),
            ("Categor√≠a", "categoria", "Ciencia o Tecnolog√≠a"),
            ("Ciclo", "ciclo", "Tercer a√±o"),
            ("Curso", "curso", "3 BTI"),
            ("√ânfasis", "enfasis", "Tecnolog√≠a")
        ]
        
        # Crear campos en pares
        for i in range(0, len(campos), 2):
            row_frame = ctk.CTkFrame(scroll_frame, fg_color="transparent")
            row_frame.pack(fill="x", pady=5)
            
            # Primera columna
            if i < len(campos):
                label, key, placeholder = campos[i]
                field_frame1 = ctk.CTkFrame(row_frame, fg_color="transparent")
                field_frame1.pack(side="left", fill="both", expand=True, padx=(0, 10))
                
                ctk.CTkLabel(field_frame1, text=label, font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w")
                entry = ctk.CTkEntry(field_frame1, placeholder_text=placeholder, height=35)
                entry.pack(fill="x", pady=(5, 0))
                self.proyecto_data[key] = entry
            
            # Segunda columna
            if i + 1 < len(campos):
                label, key, placeholder = campos[i + 1]
                field_frame2 = ctk.CTkFrame(row_frame, fg_color="transparent")
                field_frame2.pack(side="right", fill="both", expand=True, padx=(10, 0))
                
                ctk.CTkLabel(field_frame2, text=label, font=ctk.CTkFont(size=12, weight="bold")).pack(anchor="w")
                entry = ctk.CTkEntry(field_frame2, placeholder_text=placeholder, height=30)
                entry.pack(fill="x", pady=(3, 0))
                self.proyecto_data[key] = entry
        
        # Campos largos (ancho completo)
        campos_largos = [
            ("√Årea de Desarrollo", "area", "Especifique el √°rea de desarrollo"),
            ("Estudiantes (separar con comas)", "estudiantes", "Nombre1 Apellido1, Nombre2 Apellido2"),
            ("Tutores (separar con comas)", "tutores", "Prof. Nombre Apellido, Dr. Nombre Apellido"),
            ("Director", "director", "Cristina Raichakowski"),
            ("Responsable", "responsable", "Nombre del responsable")
        ]
        
        for label, key, placeholder in campos_largos:
            field_frame = ctk.CTkFrame(scroll_frame, fg_color="transparent")
            field_frame.pack(fill="x", pady=8)
            
            ctk.CTkLabel(field_frame, text=label, font=ctk.CTkFont(size=12, weight="bold")).pack(anchor="w")
            entry = ctk.CTkEntry(field_frame, placeholder_text=placeholder, height=30)
            entry.pack(fill="x", pady=(3, 0))
            self.proyecto_data[key] = entry
    
    def setup_contenido_dinamico(self):
        """Pesta√±a de contenido con gesti√≥n din√°mica de secciones - m√°s compacta"""
        tab = self.tabview.add("üìù Contenido Din√°mico")
        
        # Frame principal dividido
        main_container = ctk.CTkFrame(tab, fg_color="transparent")
        main_container.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Panel de control de secciones (izquierda) - m√°s compacto
        control_frame = ctk.CTkFrame(main_container, width=280, corner_radius=10)
        control_frame.pack(side="left", fill="y", padx=(0, 10))
        control_frame.pack_propagate(False)
        
        ctk.CTkLabel(
            control_frame, text="üõ†Ô∏è Gesti√≥n de Secciones",
            font=ctk.CTkFont(size=14, weight="bold")
        ).pack(pady=(10, 8))
        
        # Botones de gesti√≥n - m√°s compactos
        btn_frame = ctk.CTkFrame(control_frame, fg_color="transparent")
        btn_frame.pack(fill="x", padx=8, pady=(0, 8))
        
        add_btn = ctk.CTkButton(btn_frame, text="‚ûï", command=self.agregar_seccion, width=60, height=28)
        add_btn.pack(side="left", padx=(0, 3))
        
        remove_btn = ctk.CTkButton(btn_frame, text="‚ûñ", command=self.quitar_seccion, 
                                 width=60, height=28, fg_color="red", hover_color="darkred")
        remove_btn.pack(side="left", padx=(0, 3))
        
        edit_btn = ctk.CTkButton(btn_frame, text="‚úèÔ∏è", command=self.editar_seccion, width=60, height=28)
        edit_btn.pack(side="left")
        
        # Lista de secciones activas
        ctk.CTkLabel(control_frame, text="Secciones:", font=ctk.CTkFont(size=12, weight="bold")).pack(anchor="w", padx=8, pady=(8, 5))
        
        self.secciones_listbox = ctk.CTkScrollableFrame(control_frame, height=240)
        self.secciones_listbox.pack(fill="both", expand=True, padx=8, pady=(0, 8))
        
        # Botones de orden - m√°s compactos
        order_frame = ctk.CTkFrame(control_frame, fg_color="transparent")
        order_frame.pack(fill="x", padx=8, pady=(0, 8))
        
        up_btn = ctk.CTkButton(order_frame, text="‚¨ÜÔ∏è", command=self.subir_seccion, width=80, height=28)
        up_btn.pack(side="left", padx=(0, 5))
        
        down_btn = ctk.CTkButton(order_frame, text="‚¨áÔ∏è", command=self.bajar_seccion, width=80, height=28)
        down_btn.pack(side="right")
        
        # Panel de contenido (derecha)
        content_container = ctk.CTkFrame(main_container, corner_radius=10)
        content_container.pack(side="right", fill="both", expand=True)
        
        # Sub-tabview para secciones de contenido - altura reducida
        self.content_tabview = ctk.CTkTabview(content_container, width=700, height=420)
        self.content_tabview.pack(expand=True, fill="both", padx=8, pady=8)
        
        # Actualizar lista de secciones y crear pesta√±as
        self.actualizar_lista_secciones()
        self.crear_pestanas_contenido()
    
    def setup_citas_referencias(self):
        """Pesta√±a para gesti√≥n de citas m√°s compacta"""
        tab = self.tabview.add("üìö Citas y Referencias")
        
        main_frame = ctk.CTkFrame(tab, fg_color="transparent")
        main_frame.pack(fill="both", expand=True, padx=15, pady=15)
        
        # Panel de instrucciones m√°s compacto
        instruc_frame = ctk.CTkFrame(main_frame, fg_color="gray15", corner_radius=10, height=120)
        instruc_frame.pack(fill="x", pady=(0, 15))
        instruc_frame.pack_propagate(False)
        
        instruc_title = ctk.CTkLabel(
            instruc_frame, text="üöÄ SISTEMA DE CITAS",
            font=ctk.CTkFont(size=14, weight="bold"), text_color="lightgreen"
        )
        instruc_title.pack(pady=(10, 5))
        
        ejemplos_text = "üìù [CITA:textual:Garc√≠a:2020:45] ‚Ä¢ üîÑ [CITA:parafraseo:L√≥pez:2019] ‚Ä¢ üìñ [CITA:larga:Mart√≠nez:2021]"
        ctk.CTkLabel(
            instruc_frame, text=ejemplos_text,
            font=ctk.CTkFont(size=11), text_color="lightblue", wraplength=900
        ).pack(pady=2)
        
        ctk.CTkLabel(
            instruc_frame, text="‚ú® Conversi√≥n autom√°tica a formato APA",
            font=ctk.CTkFont(size=10, weight="bold"), text_color="yellow"
        ).pack(pady=(2, 10))
        
        # Frame para agregar referencias - m√°s compacto
        ref_frame = ctk.CTkFrame(main_frame, height=140)
        ref_frame.pack(fill="x", pady=(0, 15))
        ref_frame.pack_propagate(False)
        
        ref_title = ctk.CTkLabel(
            ref_frame, text="‚ûï Agregar Referencias",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        ref_title.pack(pady=(10, 8))
        
        # Campos para referencias usando pack - m√°s compactos
        fields_frame = ctk.CTkFrame(ref_frame, fg_color="transparent")
        fields_frame.pack(fill="x", padx=15, pady=(0, 10))
        
        # Primera fila
        row1_frame = ctk.CTkFrame(fields_frame, fg_color="transparent")
        row1_frame.pack(fill="x", pady=3)
        
        # Tipo
        tipo_frame = ctk.CTkFrame(row1_frame, fg_color="transparent")
        tipo_frame.pack(side="left", fill="x", expand=True, padx=(0, 5))
        ctk.CTkLabel(tipo_frame, text="Tipo:", font=ctk.CTkFont(size=11, weight="bold")).pack(anchor="w")
        self.ref_tipo = ctk.CTkComboBox(
            tipo_frame,
            values=["Libro", "Art√≠culo", "Web", "Tesis"],
            height=25, font=ctk.CTkFont(size=11)
        )
        self.ref_tipo.pack(fill="x")
        
        # Autor
        autor_frame = ctk.CTkFrame(row1_frame, fg_color="transparent")
        autor_frame.pack(side="right", fill="x", expand=True, padx=(5, 0))
        ctk.CTkLabel(autor_frame, text="Autor:", font=ctk.CTkFont(size=11, weight="bold")).pack(anchor="w")
        self.ref_autor = ctk.CTkEntry(autor_frame, placeholder_text="Apellido, N.", height=25, font=ctk.CTkFont(size=11))
        self.ref_autor.pack(fill="x")
        
        # Segunda fila
        row2_frame = ctk.CTkFrame(fields_frame, fg_color="transparent")
        row2_frame.pack(fill="x", pady=3)
        
        # A√±o
        ano_frame = ctk.CTkFrame(row2_frame, fg_color="transparent")
        ano_frame.pack(side="left", fill="x", expand=True, padx=(0, 5))
        ctk.CTkLabel(ano_frame, text="A√±o:", font=ctk.CTkFont(size=11, weight="bold")).pack(anchor="w")
        self.ref_ano = ctk.CTkEntry(ano_frame, placeholder_text="2024", height=25, font=ctk.CTkFont(size=11))
        self.ref_ano.pack(fill="x")
        
        # T√≠tulo
        titulo_frame = ctk.CTkFrame(row2_frame, fg_color="transparent")
        titulo_frame.pack(side="right", fill="x", expand=True, padx=(5, 0))
        ctk.CTkLabel(titulo_frame, text="T√≠tulo:", font=ctk.CTkFont(size=11, weight="bold")).pack(anchor="w")
        self.ref_titulo = ctk.CTkEntry(titulo_frame, placeholder_text="T√≠tulo", height=25, font=ctk.CTkFont(size=11))
        self.ref_titulo.pack(fill="x")
        
        # Tercera fila
        row3_frame = ctk.CTkFrame(fields_frame, fg_color="transparent")
        row3_frame.pack(fill="x", pady=3)
        
        # Fuente
        fuente_frame = ctk.CTkFrame(row3_frame, fg_color="transparent")
        fuente_frame.pack(fill="x")
        ctk.CTkLabel(fuente_frame, text="Fuente:", font=ctk.CTkFont(size=11, weight="bold")).pack(anchor="w")
        self.ref_fuente = ctk.CTkEntry(fuente_frame, placeholder_text="Editorial o URL", height=25, font=ctk.CTkFont(size=11))
        self.ref_fuente.pack(fill="x")
        
        add_ref_btn = ctk.CTkButton(
            ref_frame, text="‚ûï Agregar", command=self.agregar_referencia,
            height=28, font=ctk.CTkFont(size=12, weight="bold"), width=120
        )
        add_ref_btn.pack(pady=(5, 10))
        
        # Lista de referencias - m√°s compacta
        list_frame = ctk.CTkFrame(main_frame)
        list_frame.pack(fill="both", expand=True)
        
        list_title = ctk.CTkLabel(
            list_frame, text="üìã Referencias Agregadas",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        list_title.pack(pady=(10, 8))
        
        self.ref_scroll_frame = ctk.CTkScrollableFrame(list_frame, height=140)
        self.ref_scroll_frame.pack(fill="both", expand=True, padx=15, pady=(0, 8))
        
        delete_btn = ctk.CTkButton(
            list_frame, text="üóëÔ∏è Eliminar √öltima", command=self.eliminar_referencia,
            fg_color="red", hover_color="darkred", height=28, width=140
        )
        delete_btn.pack(pady=(0, 10))
    
    def setup_formato_avanzado(self):
        """Pesta√±a para opciones avanzadas de formato - m√°s compacta"""
        tab = self.tabview.add("üé® Formato")
        
        scroll_frame = ctk.CTkScrollableFrame(tab, label_text="Configuraci√≥n de Formato", height=400)
        scroll_frame.pack(fill="both", expand=True, padx=15, pady=15)
        
        # Secci√≥n de tipograf√≠a - m√°s compacta
        tipo_frame = ctk.CTkFrame(scroll_frame, fg_color="darkgreen", corner_radius=8)
        tipo_frame.pack(fill="x", pady=(0, 15))
        
        ctk.CTkLabel(
            tipo_frame, text="üî§ Tipograf√≠a",
            font=ctk.CTkFont(size=14, weight="bold"), text_color="white"
        ).pack(pady=(10, 8))
        
        # Configuraci√≥n de tipograf√≠a usando pack - m√°s compacta
        tipo_grid = ctk.CTkFrame(tipo_frame, fg_color="transparent")
        tipo_grid.pack(fill="x", padx=15, pady=(0, 10))
        
        # Primera fila
        row1_tipo = ctk.CTkFrame(tipo_grid, fg_color="transparent")
        row1_tipo.pack(fill="x", pady=3)
        
        # Fuente del texto
        fuente_texto_frame = ctk.CTkFrame(row1_tipo, fg_color="transparent")
        fuente_texto_frame.pack(side="left", fill="x", expand=True, padx=(0, 5))
        ctk.CTkLabel(fuente_texto_frame, text="Fuente texto:", font=ctk.CTkFont(size=11, weight="bold")).pack(anchor="w")
        self.fuente_texto = ctk.CTkComboBox(
            fuente_texto_frame, values=["Times New Roman", "Arial", "Calibri"], height=25
        )
        self.fuente_texto.set("Times New Roman")
        self.fuente_texto.pack(fill="x")
        
        # Tama√±o del texto
        tama√±o_texto_frame = ctk.CTkFrame(row1_tipo, fg_color="transparent")
        tama√±o_texto_frame.pack(side="right", fill="x", expand=True, padx=(5, 0))
        ctk.CTkLabel(tama√±o_texto_frame, text="Tama√±o:", font=ctk.CTkFont(size=11, weight="bold")).pack(anchor="w")
        self.tama√±o_texto = ctk.CTkComboBox(tama√±o_texto_frame, values=["10", "11", "12", "13", "14"], height=25)
        self.tama√±o_texto.set("12")
        self.tama√±o_texto.pack(fill="x")
        
        # Segunda fila
        row2_tipo = ctk.CTkFrame(tipo_grid, fg_color="transparent")
        row2_tipo.pack(fill="x", pady=3)
        
        # Fuente de t√≠tulos
        fuente_titulo_frame = ctk.CTkFrame(row2_tipo, fg_color="transparent")
        fuente_titulo_frame.pack(side="left", fill="x", expand=True, padx=(0, 5))
        ctk.CTkLabel(fuente_titulo_frame, text="Fuente t√≠tulos:", font=ctk.CTkFont(size=11, weight="bold")).pack(anchor="w")
        self.fuente_titulo = ctk.CTkComboBox(
            fuente_titulo_frame, values=["Times New Roman", "Arial", "Calibri"], height=25
        )
        self.fuente_titulo.set("Times New Roman")
        self.fuente_titulo.pack(fill="x")
        
        # Tama√±o de t√≠tulos
        tama√±o_titulo_frame = ctk.CTkFrame(row2_tipo, fg_color="transparent")
        tama√±o_titulo_frame.pack(side="right", fill="x", expand=True, padx=(5, 0))
        ctk.CTkLabel(tama√±o_titulo_frame, text="Tama√±o:", font=ctk.CTkFont(size=11, weight="bold")).pack(anchor="w")
        self.tama√±o_titulo = ctk.CTkComboBox(tama√±o_titulo_frame, values=["12", "13", "14", "15", "16"], height=25)
        self.tama√±o_titulo.set("14")
        self.tama√±o_titulo.pack(fill="x")
        
        # Secci√≥n de espaciado - m√°s compacta
        espaciado_frame = ctk.CTkFrame(scroll_frame, fg_color="darkblue", corner_radius=8)
        espaciado_frame.pack(fill="x", pady=(0, 15))
        
        ctk.CTkLabel(
            espaciado_frame, text="üìè Espaciado",
            font=ctk.CTkFont(size=14, weight="bold"), text_color="white"
        ).pack(pady=(10, 8))
        
        espaciado_grid = ctk.CTkFrame(espaciado_frame, fg_color="transparent")
        espaciado_grid.pack(fill="x", padx=15, pady=(0, 10))
        
        # Fila de espaciado
        espaciado_row = ctk.CTkFrame(espaciado_grid, fg_color="transparent")
        espaciado_row.pack(fill="x", pady=3)
        
        # Interlineado
        interlineado_frame = ctk.CTkFrame(espaciado_row, fg_color="transparent")
        interlineado_frame.pack(side="left", fill="x", expand=True, padx=(0, 5))
        ctk.CTkLabel(interlineado_frame, text="Interlineado:", font=ctk.CTkFont(size=11, weight="bold")).pack(anchor="w")
        self.interlineado = ctk.CTkComboBox(interlineado_frame, values=["1.0", "1.5", "2.0"], height=25)
        self.interlineado.set("2.0")
        self.interlineado.pack(fill="x")
        
        # M√°rgenes
        margen_frame = ctk.CTkFrame(espaciado_row, fg_color="transparent")
        margen_frame.pack(side="right", fill="x", expand=True, padx=(5, 0))
        ctk.CTkLabel(margen_frame, text="M√°rgenes (cm):", font=ctk.CTkFont(size=11, weight="bold")).pack(anchor="w")
        self.margen = ctk.CTkComboBox(margen_frame, values=["2.0", "2.54", "3.0"], height=25)
        self.margen.set("2.54")
        self.margen.pack(fill="x")
        
        # Opciones de alineaci√≥n - m√°s compacta
        align_frame = ctk.CTkFrame(scroll_frame, fg_color="darkred", corner_radius=8)
        align_frame.pack(fill="x", pady=(0, 15))
        
        ctk.CTkLabel(
            align_frame, text="üìê Alineaci√≥n",
            font=ctk.CTkFont(size=14, weight="bold"), text_color="white"
        ).pack(pady=(10, 8))
        
        align_grid = ctk.CTkFrame(align_frame, fg_color="transparent")
        align_grid.pack(fill="x", padx=15, pady=(0, 10))
        
        # Fila de opciones de alineaci√≥n
        align_row = ctk.CTkFrame(align_grid, fg_color="transparent")
        align_row.pack(fill="x", pady=3)
        
        # Opciones de formato profesional
        self.salto_pagina_var = ctk.CTkCheckBox(
            align_row, text="Salto de p√°gina entre secciones", font=ctk.CTkFont(size=12)
        )
        self.salto_pagina_var.select()
        self.salto_pagina_var.pack(side="left", padx=(10, 10))
        
        self.conservar_siguiente_var = ctk.CTkCheckBox(
            align_row, text="Conservar con siguiente", font=ctk.CTkFont(size=12)
        )
        self.conservar_siguiente_var.select()
        self.conservar_siguiente_var.pack(side="right", padx=(10, 10))
        
        # Segunda fila de opciones profesionales
        align_row2 = ctk.CTkFrame(align_grid, fg_color="transparent")
        align_row2.pack(fill="x", pady=3)
        
        self.justificado_var = ctk.CTkCheckBox(
            align_row2, text="Justificado", font=ctk.CTkFont(size=12)
        )
        self.justificado_var.select()
        self.justificado_var.pack(side="left", padx=(10, 10))
        
        self.sangria_var = ctk.CTkCheckBox(
            align_row2, text="Sangr√≠a primera l√≠nea", font=ctk.CTkFont(size=12)
        )
        self.sangria_var.select()
        self.sangria_var.pack(side="right", padx=(10, 10))
        
        # Bot√≥n para aplicar configuraci√≥n
        apply_btn = ctk.CTkButton(
            scroll_frame, text="‚úÖ Aplicar Configuraci√≥n", command=self.aplicar_formato,
            height=35, font=ctk.CTkFont(size=12, weight="bold"),
            fg_color="green", hover_color="darkgreen"
        )
        apply_btn.pack(pady=15)
    
    def setup_generacion(self):
        """Pesta√±a de generaci√≥n mejorada"""
        tab = self.tabview.add("üîß Generar")
        
        main_frame = ctk.CTkFrame(tab, fg_color="transparent")
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Opciones de inclusi√≥n
        options_frame = ctk.CTkFrame(main_frame, corner_radius=15)
        options_frame.pack(fill="x", pady=(0, 20))
        
        options_title = ctk.CTkLabel(
            options_frame, text="‚öôÔ∏è Opciones de Generaci√≥n",
            font=ctk.CTkFont(size=18, weight="bold")
        )
        options_title.pack(pady=(20, 15))
        
        options_grid = ctk.CTkFrame(options_frame, fg_color="transparent")
        options_grid.pack(padx=30, pady=(0, 20))
        
        # Primera fila de opciones
        options_row1 = ctk.CTkFrame(options_grid, fg_color="transparent")
        options_row1.pack(fill="x", pady=5)
        
        self.incluir_portada = ctk.CTkCheckBox(
            options_row1, text="üìÑ Incluir Portada", font=ctk.CTkFont(size=14)
        )
        self.incluir_portada.select()
        self.incluir_portada.pack(side="left", padx=(20, 20))
        
        self.incluir_indice = ctk.CTkCheckBox(
            options_row1, text="üìë Incluir √çndice", font=ctk.CTkFont(size=14)
        )
        self.incluir_indice.select()
        self.incluir_indice.pack(side="right", padx=(20, 20))
        
        # Segunda fila de opciones
        options_row2 = ctk.CTkFrame(options_grid, fg_color="transparent")
        options_row2.pack(fill="x", pady=5)
        
        self.incluir_agradecimientos = ctk.CTkCheckBox(
            options_row2, text="üôè Incluir Agradecimientos", font=ctk.CTkFont(size=14)
        )
        self.incluir_agradecimientos.pack(side="left", padx=(20, 20))
        
        self.numeracion_paginas = ctk.CTkCheckBox(
            options_row2, text="üìä Numeraci√≥n de p√°ginas", font=ctk.CTkFont(size=14)
        )
        self.numeracion_paginas.select()
        self.numeracion_paginas.pack(side="right", padx=(20, 20))
        
        # Frame de validaci√≥n
        validation_frame = ctk.CTkFrame(main_frame, corner_radius=15)
        validation_frame.pack(fill="both", expand=True)
        
        validation_title = ctk.CTkLabel(
            validation_frame, text="üîç Estado del Proyecto",
            font=ctk.CTkFont(size=18, weight="bold")
        )
        validation_title.pack(pady=(20, 15))
        
        self.validation_text = ctk.CTkTextbox(
            validation_frame, height=250, font=ctk.CTkFont(size=12), fg_color="gray10"
        )
        self.validation_text.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # Inicializar con mensaje de bienvenida
        self.validation_text.insert("1.0", 
            "‚ú® ¬°Generador Avanzado de Proyectos Acad√©micos!\n\n"
            "üÜï NUEVAS CARACTER√çSTICAS:\n"
            "‚Ä¢ Gesti√≥n din√°mica de secciones\n"
            "‚Ä¢ Formato personalizable (fuentes, tama√±os, espaciado)\n"
            "‚Ä¢ Uso de plantilla base del documento\n"
            "‚Ä¢ Reordenamiento de contenido\n"
            "‚Ä¢ Validaci√≥n avanzada\n\n"
            "üìã PROCESO RECOMENDADO:\n"
            "1. Completa informaci√≥n general\n"
            "2. Organiza secciones seg√∫n tu necesidad\n"
            "3. Personaliza el formato\n"
            "4. Agrega contenido y referencias\n"
            "5. Valida y genera\n\n"
            "üéØ ¬°Haz clic en 'Validar Proyecto' cuando est√©s listo!"
        )
        
        self.progress = ctk.CTkProgressBar(validation_frame, height=20)
        self.progress.pack(fill="x", padx=20, pady=(0, 20))
        self.progress.set(0)
    
    def gestionar_imagenes(self):
        """Abre ventana para gestionar im√°genes del documento"""
        img_window = ctk.CTkToplevel(self.root)
        img_window.title("üñºÔ∏è Gesti√≥n de Im√°genes")
        img_window.geometry("600x500")
        img_window.transient(self.root)
        img_window.grab_set()
        
        # Centrar ventana
        img_window.update_idletasks()
        x = (img_window.winfo_screenwidth() // 2) - (600 // 2)
        y = (img_window.winfo_screenheight() // 2) - (500 // 2)
        img_window.geometry(f"600x500+{x}+{y}")
        
        main_frame = ctk.CTkFrame(img_window, corner_radius=0)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo
        title_label = ctk.CTkLabel(
            main_frame, text="üñºÔ∏è Gesti√≥n de Im√°genes del Documento",
            font=ctk.CTkFont(size=18, weight="bold")
        )
        title_label.pack(pady=(10, 20))
        
        # Estado de im√°genes base
        status_frame = ctk.CTkFrame(main_frame, fg_color="gray20", corner_radius=10)
        status_frame.pack(fill="x", pady=(0, 20))
        
        status_title = ctk.CTkLabel(
            status_frame, text="üìÅ Estado de Im√°genes Base",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        status_title.pack(pady=(10, 5))
        
        # Estado del encabezado
        enc_status = "‚úÖ Encontrado" if self.ruta_encabezado else "‚ùå No encontrado"
        enc_label = ctk.CTkLabel(
            status_frame, text=f"Encabezado.png: {enc_status}",
            font=ctk.CTkFont(size=12)
        )
        enc_label.pack(pady=2)
        
        # Estado de la insignia
        ins_status = "‚úÖ Encontrado" if self.ruta_insignia else "‚ùå No encontrado"
        ins_label = ctk.CTkLabel(
            status_frame, text=f"Insignia.png: {ins_status}",
            font=ctk.CTkFont(size=12)
        )
        ins_label.pack(pady=(2, 10))
        
        # Secci√≥n de carga personalizada
        custom_frame = ctk.CTkFrame(main_frame, fg_color="darkblue", corner_radius=10)
        custom_frame.pack(fill="x", pady=(0, 20))
        
        custom_title = ctk.CTkLabel(
            custom_frame, text="üì§ Cargar Im√°genes Personalizadas",
            font=ctk.CTkFont(size=14, weight="bold"), text_color="white"
        )
        custom_title.pack(pady=(15, 10))
        
        # Botones de carga
        btn_frame = ctk.CTkFrame(custom_frame, fg_color="transparent")
        btn_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        enc_btn = ctk.CTkButton(
            btn_frame, text="üìã Cargar Encabezado", 
            command=lambda: self.cargar_imagen_personalizada("encabezado"),
            width=200, height=35
        )
        enc_btn.pack(side="left", padx=(0, 10))
        
        ins_btn = ctk.CTkButton(
            btn_frame, text="üèõÔ∏è Cargar Insignia", 
            command=lambda: self.cargar_imagen_personalizada("insignia"),
            width=200, height=35
        )
        ins_btn.pack(side="right", padx=(10, 0))
        
        # Estado de im√°genes personalizadas
        custom_status_frame = ctk.CTkFrame(main_frame, fg_color="gray20", corner_radius=10)
        custom_status_frame.pack(fill="x", pady=(0, 20))
        
        custom_status_title = ctk.CTkLabel(
            custom_status_frame, text="üé® Im√°genes Personalizadas Cargadas",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        custom_status_title.pack(pady=(10, 5))
        
        self.enc_custom_label = ctk.CTkLabel(
            custom_status_frame, 
            text=f"Encabezado: {'‚úÖ Cargado' if self.encabezado_personalizado else '‚è∏Ô∏è No cargado'}",
            font=ctk.CTkFont(size=12)
        )
        self.enc_custom_label.pack(pady=2)
        
        self.ins_custom_label = ctk.CTkLabel(
            custom_status_frame, 
            text=f"Insignia: {'‚úÖ Cargado' if self.insignia_personalizada else '‚è∏Ô∏è No cargado'}",
            font=ctk.CTkFont(size=12)
        )
        self.ins_custom_label.pack(pady=(2, 10))
        
        # Botones de acci√≥n
        action_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        action_frame.pack(fill="x", pady=(0, 10))
        
        reset_btn = ctk.CTkButton(
            action_frame, text="üîÑ Restablecer", 
            command=lambda: self.restablecer_imagenes(img_window),
            width=120, height=35, fg_color="red", hover_color="darkred"
        )
        reset_btn.pack(side="left")
        
        close_btn = ctk.CTkButton(
            action_frame, text="‚úÖ Cerrar", 
            command=img_window.destroy,
            width=120, height=35
        )
        close_btn.pack(side="right")
        
        # Informaci√≥n adicional
        info_frame = ctk.CTkFrame(main_frame, fg_color="green", corner_radius=10)
        info_frame.pack(fill="x")
        
        info_text = """üí° INFORMACI√ìN IMPORTANTE:
‚Ä¢ Las im√°genes base se buscan en: /Recursos/Encabezado.png e /Recursos/Insignia.png
‚Ä¢ Las im√°genes personalizadas tienen prioridad sobre las base
‚Ä¢ Formatos soportados: PNG, JPG, JPEG
‚Ä¢ Tama√±o recomendado: Encabezado 600x100px, Insignia 100x100px"""
        
        info_label = ctk.CTkLabel(
            info_frame, text=info_text, font=ctk.CTkFont(size=10),
            justify="left", wraplength=550, text_color="white"
        )
        info_label.pack(padx=15, pady=10)
    
    def cargar_imagen_personalizada(self, tipo):
        """Carga una imagen personalizada"""
        filetypes = [
            ("Im√°genes", "*.png *.jpg *.jpeg"),
            ("PNG files", "*.png"),
            ("JPG files", "*.jpg *.jpeg")
        ]
        
        filename = filedialog.askopenfilename(
            title=f"Seleccionar {tipo.capitalize()}",
            filetypes=filetypes
        )
        
        if filename:
            try:
                # Verificar que sea una imagen v√°lida
                with Image.open(filename) as img:
                    # Validar tama√±o m√≠nimo
                    if img.width < 50 or img.height < 50:
                        messagebox.showwarning("‚ö†Ô∏è Advertencia", 
                            "La imagen es muy peque√±a. Se recomienda al menos 50x50 p√≠xeles.")
                    
                    if tipo == "encabezado":
                        self.encabezado_personalizado = filename
                        self.enc_custom_label.configure(text="Encabezado: ‚úÖ Cargado")
                    else:
                        self.insignia_personalizada = filename
                        self.ins_custom_label.configure(text="Insignia: ‚úÖ Cargado")
                    
                    messagebox.showinfo("‚úÖ √âxito", 
                        f"{tipo.capitalize()} cargado correctamente.\n"
                        f"Tama√±o: {img.width}x{img.height} p√≠xeles")
                        
            except Exception as e:
                messagebox.showerror("‚ùå Error", 
                    f"Error al cargar la imagen:\n{str(e)}")
    
    def restablecer_imagenes(self, window):
        """Restablece las im√°genes a las base"""
        self.encabezado_personalizado = None
        self.insignia_personalizada = None
        
        # Actualizar labels
        self.enc_custom_label.configure(text="Encabezado: ‚è∏Ô∏è No cargado")
        self.ins_custom_label.configure(text="Insignia: ‚è∏Ô∏è No cargado")
        
        messagebox.showinfo("üîÑ Restablecido", 
            "Se usar√°n las im√°genes base (si est√°n disponibles)")
    
    def setup_keyboard_shortcuts(self):
        """Configura atajos de teclado"""
        self.root.bind('<Control-s>', lambda e: self.guardar_proyecto())
        self.root.bind('<Control-o>', lambda e: self.cargar_proyecto())
        self.root.bind('<Control-n>', lambda e: self.nuevo_proyecto())
        self.root.bind('<F5>', lambda e: self.validar_proyecto())
        self.root.bind('<F9>', lambda e: self.generar_documento_async())
        self.root.bind('<Control-q>', lambda e: self.root.quit())
    
    def actualizar_estadisticas(self):
        """Actualiza las estad√≠sticas en tiempo real"""
        total_words = 0
        total_chars = 0
        sections_completed = 0
        
        for key, text_widget in self.content_texts.items():
            if key in self.secciones_disponibles:
                content = text_widget.get("1.0", "end").strip()
                if content and len(content) > 10:
                    sections_completed += 1
                    words = len(content.split())
                    total_words += words
                    total_chars += len(content)
        
        self.stats = {
            'total_words': total_words,
            'total_chars': total_chars,
            'sections_completed': sections_completed,
            'references_added': len(self.referencias)
        }
        
        # Actualizar label
        total_sections = len([s for s in self.secciones_disponibles.values() if not s['capitulo']])
        stats_text = f"üìä Palabras: {total_words} | Secciones: {sections_completed}/{total_sections} | Referencias: {len(self.referencias)}"
        self.stats_label.configure(text=stats_text)
        
        # Programar pr√≥xima actualizaci√≥n
        self.root.after(2000, self.actualizar_estadisticas)
    
    def guardar_proyecto(self):
        """Guarda el proyecto completo en un archivo JSON"""
        try:
            # Recopilar todos los datos
            proyecto_completo = {
                'version': '2.0',
                'fecha_creacion': datetime.now().isoformat(),
                'informacion_general': {},
                'contenido_secciones': {},
                'referencias': self.referencias,
                'secciones_activas': self.secciones_activas,
                'secciones_disponibles': self.secciones_disponibles,
                'formato_config': self.formato_config,
                'imagenes': {
                    'encabezado_personalizado': self.encabezado_personalizado,
                    'insignia_personalizada': self.insignia_personalizada
                },
                'estadisticas': self.stats
            }
            
            # Informaci√≥n general
            for key, entry in self.proyecto_data.items():
                if hasattr(entry, 'get'):
                    proyecto_completo['informacion_general'][key] = entry.get()
            
            # Contenido de secciones
            for key, text_widget in self.content_texts.items():
                proyecto_completo['contenido_secciones'][key] = text_widget.get("1.0", "end")
            
            # Guardar archivo
            filename = filedialog.asksaveasfilename(
                defaultextension=".json",
                filetypes=[("Proyecto Acad√©mico", "*.json"), ("Todos los archivos", "*.*")],
                title="Guardar Proyecto"
            )
            
            if filename:
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(proyecto_completo, f, ensure_ascii=False, indent=2)
                
                self.last_save_time = datetime.now()
                messagebox.showinfo("üíæ Guardado", 
                    f"Proyecto guardado exitosamente:\n{os.path.basename(filename)}")
                
        except Exception as e:
            messagebox.showerror("‚ùå Error", f"Error al guardar proyecto:\n{str(e)}")
    
    def cargar_proyecto(self):
        """Carga un proyecto desde archivo JSON"""
        try:
            filename = filedialog.askopenfilename(
                filetypes=[("Proyecto Acad√©mico", "*.json"), ("Todos los archivos", "*.*")],
                title="Cargar Proyecto"
            )
            
            if not filename:
                return
            
            with open(filename, 'r', encoding='utf-8') as f:
                proyecto_completo = json.load(f)
            
            # Verificar versi√≥n
            version = proyecto_completo.get('version', '1.0')
            if version != '2.0':
                messagebox.showwarning("‚ö†Ô∏è Versi√≥n", 
                    "Este proyecto fue creado con una versi√≥n anterior. Algunas caracter√≠sticas pueden no funcionar correctamente.")
            
            # Cargar informaci√≥n general
            if 'informacion_general' in proyecto_completo:
                for key, value in proyecto_completo['informacion_general'].items():
                    if key in self.proyecto_data and hasattr(self.proyecto_data[key], 'delete'):
                        self.proyecto_data[key].delete(0, "end")
                        self.proyecto_data[key].insert(0, value)
            
            # Cargar configuraci√≥n de formato
            if 'formato_config' in proyecto_completo:
                self.formato_config.update(proyecto_completo['formato_config'])
                self.aplicar_config_cargada()
            
            # Cargar secciones
            if 'secciones_disponibles' in proyecto_completo:
                self.secciones_disponibles = proyecto_completo['secciones_disponibles']
            
            if 'secciones_activas' in proyecto_completo:
                self.secciones_activas = proyecto_completo['secciones_activas']
            
            # Cargar referencias
            if 'referencias' in proyecto_completo:
                self.referencias = proyecto_completo['referencias']
                self.actualizar_lista_referencias()
            
            # Cargar im√°genes
            if 'imagenes' in proyecto_completo:
                self.encabezado_personalizado = proyecto_completo['imagenes'].get('encabezado_personalizado')
                self.insignia_personalizada = proyecto_completo['imagenes'].get('insignia_personalizada')
            
            # Recrear interfaz
            self.actualizar_lista_secciones()
            self.crear_pestanas_contenido()
            
            # Cargar contenido de secciones
            if 'contenido_secciones' in proyecto_completo:
                for key, content in proyecto_completo['contenido_secciones'].items():
                    if key in self.content_texts:
                        self.content_texts[key].delete("1.0", "end")
                        self.content_texts[key].insert("1.0", content)
            
            messagebox.showinfo("üìÇ Cargado", 
                f"Proyecto cargado exitosamente:\n{os.path.basename(filename)}")
                
        except Exception as e:
            messagebox.showerror("‚ùå Error", f"Error al cargar proyecto:\n{str(e)}")
    
    def nuevo_proyecto(self):
        """Crea un nuevo proyecto limpio"""
        respuesta = messagebox.askyesno("üÜï Nuevo Proyecto", 
            "¬øEst√°s seguro? Se perder√°n todos los cambios no guardados.")
        
        if respuesta:
            # Reiniciar todas las variables
            self.referencias = []
            self.encabezado_personalizado = None
            self.insignia_personalizada = None
            self.secciones_disponibles = self.get_secciones_iniciales()
            self.secciones_activas = list(self.secciones_disponibles.keys())
            
            # Limpiar campos
            for entry in self.proyecto_data.values():
                if hasattr(entry, 'delete'):
                    entry.delete(0, "end")
            
            # Recrear interfaz
            self.actualizar_lista_secciones()
            self.crear_pestanas_contenido()
            self.actualizar_lista_referencias()
            
            messagebox.showinfo("üÜï Nuevo Proyecto", "Proyecto nuevo creado")
    
    def auto_save_project(self):
        """Guarda autom√°ticamente el proyecto"""
        if self.auto_save_enabled:
            try:
                script_dir = os.path.dirname(os.path.abspath(__file__))
                auto_save_path = os.path.join(script_dir, "auto_save.json")
                
                # Crear backup autom√°tico
                proyecto_completo = {
                    'version': '2.0',
                    'fecha_auto_save': datetime.now().isoformat(),
                    'informacion_general': {},
                    'contenido_secciones': {},
                    'referencias': self.referencias,
                    'secciones_activas': self.secciones_activas,
                    'formato_config': self.formato_config
                }
                
                # Guardar informaci√≥n
                for key, entry in self.proyecto_data.items():
                    if hasattr(entry, 'get'):
                        proyecto_completo['informacion_general'][key] = entry.get()
                
                for key, text_widget in self.content_texts.items():
                    proyecto_completo['contenido_secciones'][key] = text_widget.get("1.0", "end")
                
                with open(auto_save_path, 'w', encoding='utf-8') as f:
                    json.dump(proyecto_completo, f, ensure_ascii=False, indent=2)
                
                print(f"Auto-guardado realizado: {datetime.now().strftime('%H:%M:%S')}")
                
            except Exception as e:
                print(f"Error en auto-guardado: {e}")
            
            # Programar pr√≥ximo auto-guardado
            self.root.after(300000, self.auto_save_project)  # 5 minutos
    
    def exportar_configuracion(self):
        """Exporta solo la configuraci√≥n de formato"""
        try:
            config_export = {
                'version': '2.0',
                'tipo': 'configuracion_formato',
                'fecha_export': datetime.now().isoformat(),
                'formato_config': self.formato_config,
                'secciones_disponibles': self.secciones_disponibles,
                'secciones_activas': self.secciones_activas
            }
            
            filename = filedialog.asksaveasfilename(
                defaultextension=".json",
                filetypes=[("Configuraci√≥n", "*.json")],
                title="Exportar Configuraci√≥n"
            )
            
            if filename:
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(config_export, f, ensure_ascii=False, indent=2)
                
                messagebox.showinfo("üì§ Exportado", 
                    "Configuraci√≥n exportada exitosamente")
                    
        except Exception as e:
            messagebox.showerror("‚ùå Error", f"Error al exportar:\n{str(e)}")
    
    def aplicar_config_cargada(self):
        """Aplica configuraci√≥n cargada a los controles"""
        try:
            # Actualizar controles de formato si existen
            if hasattr(self, 'fuente_texto'):
                self.fuente_texto.set(self.formato_config.get('fuente_texto', 'Times New Roman'))
            if hasattr(self, 'tama√±o_texto'):
                self.tama√±o_texto.set(str(self.formato_config.get('tama√±o_texto', 12)))
            if hasattr(self, 'fuente_titulo'):
                self.fuente_titulo.set(self.formato_config.get('fuente_titulo', 'Times New Roman'))
            if hasattr(self, 'tama√±o_titulo'):
                self.tama√±o_titulo.set(str(self.formato_config.get('tama√±o_titulo', 14)))
            if hasattr(self, 'interlineado'):
                self.interlineado.set(str(self.formato_config.get('interlineado', 2.0)))
            if hasattr(self, 'margen'):
                self.margen.set(str(self.formato_config.get('margen', 2.54)))
                
        except Exception as e:
            print(f"Error aplicando configuraci√≥n: {e}")
    
    def actualizar_lista_referencias(self):
        """Actualiza la lista visual de referencias"""
        # Limpiar lista actual
        for widget in self.ref_scroll_frame.winfo_children():
            widget.destroy()
        
        # Recrear todas las referencias
        for ref in self.referencias:
            ref_item_frame = ctk.CTkFrame(self.ref_scroll_frame, fg_color="gray20", corner_radius=8)
            ref_item_frame.pack(fill="x", padx=5, pady=5)
            
            apa_ref = f"{ref['autor']} ({ref['a√±o']}). {ref['titulo']}. {ref['fuente']}"
            ref_label = ctk.CTkLabel(
                ref_item_frame, text=f"üìñ {apa_ref}", font=ctk.CTkFont(size=11),
                wraplength=800, justify="left"
            )
            ref_label.pack(padx=15, pady=10, anchor="w")
        """Obtiene la ruta final de la imagen a usar (personalizada o base)"""
        if tipo == "encabezado":
            return self.encabezado_personalizado or self.ruta_encabezado
        elif tipo == "insignia":
            return self.insignia_personalizada or self.ruta_insignia
        return None
        """Activa/desactiva el uso del formato base"""
        if self.usar_base_var.get():
            if self.documento_base is None:
                self.cargar_documento_base()
            else:
                self.aplicar_formato_base()
        else:
            self.limpiar_formato_base()
    
    def cargar_documento_base(self):
        """Carga el documento base proporcionado"""
        try:
            # Simulamos la carga del formato base
            self.documento_base = {
                'institucion': 'COLEGIO PRIVADO DIVINA ESPERANZA',
                'ciclo': 'Tercer a√±o',
                'curso': '3 BTI',
                'enfasis': 'Tecnolog√≠a',
                'director': 'Cristina Raichakowski'
            }
            
            messagebox.showinfo("‚úÖ √âxito", 
                "Formato base cargado correctamente.\n"
                "Se aplicar√°n autom√°ticamente:\n"
                "‚Ä¢ Estructura del documento\n"
                "‚Ä¢ Datos predefinidos\n"
                "‚Ä¢ Formato espec√≠fico\n\n"
                "Marca la casilla para activarlo.")
            
            self.usar_base_var.select()
            self.aplicar_formato_base()
            
        except Exception as e:
            messagebox.showerror("‚ùå Error", f"Error al cargar formato base:\n{str(e)}")
    
    def aplicar_formato_base(self):
        """Aplica los datos del formato base"""
        if self.documento_base:
            for key, value in self.documento_base.items():
                if key in self.proyecto_data:
                    self.proyecto_data[key].delete(0, "end")
                    self.proyecto_data[key].insert(0, value)
            
            messagebox.showinfo("‚úÖ Aplicado", "Formato base aplicado correctamente")
    
    def limpiar_formato_base(self):
        """Limpia los datos del formato base"""
        campos_base = ['institucion', 'ciclo', 'curso', 'enfasis', 'director']
        for campo in campos_base:
            if campo in self.proyecto_data:
                self.proyecto_data[campo].delete(0, "end")
    
    def aplicar_formato(self):
        """Aplica la configuraci√≥n de formato"""
        self.formato_config = {
            'fuente_texto': self.fuente_texto.get(),
            'tama√±o_texto': int(self.tama√±o_texto.get()),
            'fuente_titulo': self.fuente_titulo.get(),
            'tama√±o_titulo': int(self.tama√±o_titulo.get()),
            'interlineado': float(self.interlineado.get()),
            'margen': float(self.margen.get()),
            'justificado': self.justificado_var.get(),
            'sangria': self.sangria_var.get()
        }
        
        # Actualizar preview
        self.preview_label.configure(
            font=ctk.CTkFont(family=self.formato_config['fuente_texto'], 
                           size=self.formato_config['tama√±o_texto'])
        )
        
        messagebox.showinfo("‚úÖ Aplicado", "Configuraci√≥n de formato aplicada correctamente")
    
    def actualizar_lista_secciones(self):
        """Actualiza la lista visual de secciones activas"""
        # Limpiar lista actual
        for widget in self.secciones_listbox.winfo_children():
            widget.destroy()
        
        # Recrear lista
        for i, seccion_id in enumerate(self.secciones_activas):
            if seccion_id in self.secciones_disponibles:
                seccion = self.secciones_disponibles[seccion_id]
                
                item_frame = ctk.CTkFrame(self.secciones_listbox, fg_color="gray20", corner_radius=5)
                item_frame.pack(fill="x", pady=2, padx=5)
                
                # Checkbox para selecci√≥n
                checkbox = ctk.CTkCheckBox(
                    item_frame, text="", width=20, command=lambda idx=i: self.seleccionar_seccion(idx)
                )
                checkbox.pack(side="left", padx=(10, 5), pady=5)
                
                # Texto de la secci√≥n
                color = "yellow" if seccion['requerida'] else "white"
                if seccion['capitulo']:
                    color = "lightblue"
                
                label = ctk.CTkLabel(
                    item_frame, text=seccion['titulo'], 
                    font=ctk.CTkFont(size=11), text_color=color
                )
                label.pack(side="left", fill="x", expand=True, pady=5)
                
                # Guardar referencia para selecci√≥n
                checkbox.seccion_index = i
    
    def seleccionar_seccion(self, index):
        """Maneja la selecci√≥n de secciones"""
        # Esta funci√≥n se puede expandir para manejar selecciones m√∫ltiples
        pass
    
    def agregar_seccion(self):
        """Agrega una nueva secci√≥n personalizada"""
        dialog = SeccionDialog(self.root, self.secciones_disponibles)
        if dialog.result:
            seccion_id, seccion_data = dialog.result
            self.secciones_disponibles[seccion_id] = seccion_data
            self.secciones_activas.append(seccion_id)
            self.actualizar_lista_secciones()
            self.crear_pestanas_contenido()
            messagebox.showinfo("‚úÖ Agregada", f"Secci√≥n '{seccion_data['titulo']}' agregada correctamente")
    
    def quitar_seccion(self):
        """Quita secciones seleccionadas"""
        # Encontrar secciones seleccionadas
        secciones_a_quitar = []
        for widget in self.secciones_listbox.winfo_children():
            if hasattr(widget, 'winfo_children'):
                for child in widget.winfo_children():
                    if isinstance(child, ctk.CTkCheckBox) and child.get():
                        if hasattr(child, 'seccion_index'):
                            secciones_a_quitar.append(child.seccion_index)
        
        if secciones_a_quitar:
            # Verificar si hay secciones requeridas
            secciones_requeridas = []
            for idx in secciones_a_quitar:
                seccion_id = self.secciones_activas[idx]
                if self.secciones_disponibles[seccion_id]['requerida']:
                    secciones_requeridas.append(self.secciones_disponibles[seccion_id]['titulo'])
            
            if secciones_requeridas:
                messagebox.showwarning("‚ö†Ô∏è Advertencia", 
                    f"No se pueden eliminar secciones requeridas:\n{', '.join(secciones_requeridas)}")
                return
            
            # Quitar secciones (en orden inverso para mantener √≠ndices)
            for idx in sorted(secciones_a_quitar, reverse=True):
                seccion_id = self.secciones_activas.pop(idx)
                if seccion_id in self.content_texts:
                    del self.content_texts[seccion_id]
            
            self.actualizar_lista_secciones()
            self.crear_pestanas_contenido()
            messagebox.showinfo("‚úÖ Eliminadas", f"{len(secciones_a_quitar)} secci√≥n(es) eliminada(s)")
        else:
            messagebox.showwarning("‚ö†Ô∏è Selecci√≥n", "Selecciona al menos una secci√≥n para eliminar")
    
    def editar_seccion(self):
        """Edita una secci√≥n existente"""
        # Implementar di√°logo de edici√≥n
        messagebox.showinfo("üöß En desarrollo", "Funci√≥n de edici√≥n en desarrollo")
    
    def subir_seccion(self):
        """Sube una secci√≥n en el orden"""
        secciones_seleccionadas = self.obtener_secciones_seleccionadas()
        if len(secciones_seleccionadas) == 1:
            idx = secciones_seleccionadas[0]
            if idx > 0:
                # Intercambiar posiciones
                self.secciones_activas[idx], self.secciones_activas[idx-1] = \
                self.secciones_activas[idx-1], self.secciones_activas[idx]
                self.actualizar_lista_secciones()
                self.crear_pestanas_contenido()
        else:
            messagebox.showwarning("‚ö†Ô∏è Selecci√≥n", "Selecciona exactamente una secci√≥n")
    
    def bajar_seccion(self):
        """Baja una secci√≥n en el orden"""
        secciones_seleccionadas = self.obtener_secciones_seleccionadas()
        if len(secciones_seleccionadas) == 1:
            idx = secciones_seleccionadas[0]
            if idx < len(self.secciones_activas) - 1:
                # Intercambiar posiciones
                self.secciones_activas[idx], self.secciones_activas[idx+1] = \
                self.secciones_activas[idx+1], self.secciones_activas[idx]
                self.actualizar_lista_secciones()
                self.crear_pestanas_contenido()
        else:
            messagebox.showwarning("‚ö†Ô∏è Selecci√≥n", "Selecciona exactamente una secci√≥n")
    
    def obtener_secciones_seleccionadas(self):
        """Obtiene las secciones actualmente seleccionadas"""
        seleccionadas = []
        for widget in self.secciones_listbox.winfo_children():
            if hasattr(widget, 'winfo_children'):
                for child in widget.winfo_children():
                    if isinstance(child, ctk.CTkCheckBox) and child.get():
                        if hasattr(child, 'seccion_index'):
                            seleccionadas.append(child.seccion_index)
        return seleccionadas
    
    def crear_pestanas_contenido(self):
        """Crea las pesta√±as de contenido basadas en secciones activas"""
        # Limpiar pesta√±as existentes
        for tab_name in list(self.content_tabview._tab_dict.keys()):
            self.content_tabview.delete(tab_name)
        
        # Crear nuevas pesta√±as
        for seccion_id in self.secciones_activas:
            if seccion_id in self.secciones_disponibles:
                seccion = self.secciones_disponibles[seccion_id]
                
                if not seccion['capitulo']:  # Solo crear pesta√±as para contenido, no para t√≠tulos de cap√≠tulo
                    tab = self.content_tabview.add(seccion['titulo'])
                    
                    # Frame de instrucciones
                    instruc_frame = ctk.CTkFrame(tab, fg_color="gray20", corner_radius=10)
                    instruc_frame.pack(fill="x", padx=10, pady=(10, 5))
                    
                    instruc_label = ctk.CTkLabel(
                        instruc_frame, text=f"üí° {seccion['instruccion']}",
                        font=ctk.CTkFont(size=12), wraplength=600, justify="left"
                    )
                    instruc_label.pack(padx=15, pady=10)
                    
                    # Text widget
                    text_widget = ctk.CTkTextbox(
                        tab, wrap="word", font=ctk.CTkFont(size=12), height=350
                    )
                    text_widget.pack(expand=True, fill="both", padx=10, pady=(5, 10))
                    
                    # Conservar contenido existente si ya existe
                    if seccion_id in self.content_texts:
                        contenido_existente = self.content_texts[seccion_id].get("1.0", "end")
                        text_widget.insert("1.0", contenido_existente)
                    
                    self.content_texts[seccion_id] = text_widget
    
    # Mantener m√©todos existentes (agregar_referencia, eliminar_referencia, etc.)
    def agregar_referencia(self):
        """Agrega una referencia a la lista con dise√±o moderno"""
        if not all([self.ref_autor.get(), self.ref_ano.get(), self.ref_titulo.get()]):
            messagebox.showerror("‚ùå Error", "Completa al menos Autor, A√±o y T√≠tulo")
            return
        
        ref = {
            'tipo': self.ref_tipo.get(),
            'autor': self.ref_autor.get(),
            'a√±o': self.ref_ano.get(),
            'titulo': self.ref_titulo.get(),
            'fuente': self.ref_fuente.get()
        }
        
        self.referencias.append(ref)
        
        # Crear frame para la referencia
        ref_item_frame = ctk.CTkFrame(self.ref_scroll_frame, fg_color="gray20", corner_radius=8)
        ref_item_frame.pack(fill="x", padx=5, pady=5)
        
        # Formato APA para mostrar
        apa_ref = f"{ref['autor']} ({ref['a√±o']}). {ref['titulo']}. {ref['fuente']}"
        
        ref_label = ctk.CTkLabel(
            ref_item_frame, text=f"üìñ {apa_ref}", font=ctk.CTkFont(size=11),
            wraplength=800, justify="left"
        )
        ref_label.pack(padx=15, pady=10, anchor="w")
        
        # Limpiar campos
        self.ref_autor.delete(0, "end")
        self.ref_ano.delete(0, "end")
        self.ref_titulo.delete(0, "end")
        self.ref_fuente.delete(0, "end")
        
        messagebox.showinfo("‚úÖ √âxito", "Referencia agregada correctamente")
    
    def eliminar_referencia(self):
        """Elimina la √∫ltima referencia"""
        if self.referencias:
            self.referencias.pop()
            # Recrear lista visual
            for widget in self.ref_scroll_frame.winfo_children():
                widget.destroy()
            
            for ref in self.referencias:
                ref_item_frame = ctk.CTkFrame(self.ref_scroll_frame, fg_color="gray20", corner_radius=8)
                ref_item_frame.pack(fill="x", padx=5, pady=5)
                
                apa_ref = f"{ref['autor']} ({ref['a√±o']}). {ref['titulo']}. {ref['fuente']}"
                ref_label = ctk.CTkLabel(
                    ref_item_frame, text=f"üìñ {apa_ref}", font=ctk.CTkFont(size=11),
                    wraplength=800, justify="left"
                )
                ref_label.pack(padx=15, pady=10, anchor="w")
            
            messagebox.showinfo("üóëÔ∏è Eliminado", "√öltima referencia eliminada")
        else:
            messagebox.showwarning("‚ö†Ô∏è Advertencia", "No hay referencias para eliminar")
    
    def validar_proyecto(self):
        """Valida el proyecto con las nuevas funcionalidades"""
        self.validation_text.delete("1.0", "end")
        errores = []
        advertencias = []
        
        # Validar informaci√≥n general
        campos_requeridos = ['titulo', 'estudiantes', 'tutores']
        for campo in campos_requeridos:
            if not self.proyecto_data[campo].get().strip():
                errores.append(f"‚ùå Campo requerido faltante: {campo}")
        
        # Validar secciones requeridas
        for seccion_id in self.secciones_activas:
            if seccion_id in self.secciones_disponibles:
                seccion = self.secciones_disponibles[seccion_id]
                if seccion['requerida'] and not seccion['capitulo']:
                    if seccion_id in self.content_texts:
                        content = self.content_texts[seccion_id].get("1.0", "end").strip()
                        if len(content) < 50:
                            errores.append(f"‚ùå Secci√≥n requerida '{seccion['titulo']}' muy corta")
                    else:
                        errores.append(f"‚ùå Secci√≥n requerida '{seccion['titulo']}' faltante")
        
        # Validar citas en marco te√≥rico
        if 'marco_teorico' in self.content_texts:
            content = self.content_texts['marco_teorico'].get("1.0", "end")
            citas_encontradas = re.findall(r'\[CITA:[^\]]+\]', content)
            if not citas_encontradas:
                advertencias.append("‚ö†Ô∏è Marco Te√≥rico sin citas detectadas")
        
        # Validar referencias
        if len(self.referencias) == 0:
            advertencias.append("‚ö†Ô∏è No hay referencias bibliogr√°ficas")
        
        # Mostrar resultados
        resultado = "üîç VALIDACI√ìN AVANZADA DEL PROYECTO\n" + "="*60 + "\n\n"
        
        if errores:
            resultado += "üö® ERRORES CR√çTICOS:\n"
            for error in errores:
                resultado += f"{error}\n"
            resultado += "\n"
        
        if advertencias:
            resultado += "‚ö†Ô∏è ADVERTENCIAS:\n"
            for advertencia in advertencias:
                resultado += f"{advertencia}\n"
            resultado += "\n"
        
        # Estad√≠sticas del proyecto
        resultado += "üìä ESTAD√çSTICAS DEL PROYECTO:\n"
        resultado += f"‚Ä¢ Secciones activas: {len(self.secciones_activas)}\n"
        resultado += f"‚Ä¢ Secciones con contenido: {len([s for s in self.content_texts if self.content_texts[s].get('1.0', 'end').strip()])}\n"
        resultado += f"‚Ä¢ Referencias bibliogr√°ficas: {len(self.referencias)}\n"
        resultado += f"‚Ä¢ Formato personalizado: {'S√≠' if self.formato_config['fuente_texto'] != 'Times New Roman' else 'Est√°ndar'}\n"
        resultado += f"‚Ä¢ Plantilla base: {'Activada' if self.usar_base_var.get() else 'No usada'}\n\n"
        
        if not errores and not advertencias:
            resultado += "‚úÖ ¬°PROYECTO PERFECTO!\n\n"
            resultado += "üéâ El proyecto cumple con todos los requisitos\n"
            resultado += "üìÑ Listo para generar con formato personalizado\n"
        elif not errores:
            resultado += "‚úÖ PROYECTO V√ÅLIDO\n\n"
            resultado += "üéØ Proyecto listo para generar\n"
            resultado += "üí° Revisa las advertencias para mejorar\n"
        else:
            resultado += "‚ùå PROYECTO INCOMPLETO\n\n"
            resultado += "üîß Corrige los errores marcados\n"
        
        self.validation_text.insert("1.0", resultado)
        
        # Actualizar progreso
        total_items = len(campos_requeridos) + len([s for s in self.secciones_disponibles.values() if s['requerida']]) + 1
        items_completos = total_items - len(errores)
        progreso = max(0, items_completos / total_items)
        self.progress.set(progreso)
    
    def procesar_citas(self, texto):
        """Procesa las citas mejorado"""
        def reemplazar_cita(match):
            cita_completa = match.group(0)
            contenido = cita_completa[6:-1]  # Quita [CITA: y ]
            partes = contenido.split(':')
            
            if len(partes) >= 3:
                tipo, autor, a√±o = partes[0], partes[1], partes[2]
                pagina = partes[3] if len(partes) > 3 else None
                
                if tipo == 'textual':
                    return f" ({autor}, {a√±o}, p. {pagina})" if pagina else f" ({autor}, {a√±o})"
                elif tipo == 'parafraseo':
                    return f" ({autor}, {a√±o})"
                elif tipo == 'larga':
                    return f"\n\n({autor}, {a√±o}, p. {pagina})\n\n" if pagina else f"\n\n({autor}, {a√±o})\n\n"
                elif tipo == 'web':
                    return f" ({autor}, {a√±o})"
            
            return cita_completa
        
        return re.sub(r'\[CITA:[^\]]+\]', reemplazar_cita, texto)
    
    def generar_documento_async(self):
        """Genera el documento profesional en un hilo separado"""
        def generar():
            try:
                self.progress.set(0)
                self.progress.start()
                
                # Crear documento
                doc = Document()
                
                # Configurar estilos profesionales
                titulo_style = self.configurar_estilos_profesionales(doc)
                self.progress.set(0.1)
                
                # Generar contenido
                if self.incluir_portada.get():
                    self.crear_portada_profesional(doc)
                    self.progress.set(0.2)
                
                if self.incluir_agradecimientos.get():
                    self.crear_agradecimientos_profesional(doc)
                    self.progress.set(0.3)
                
                if 'resumen' in self.secciones_activas and 'resumen' in self.content_texts:
                    contenido_resumen = self.content_texts['resumen'].get("1.0", "end")
                    self.crear_seccion_profesional(doc, "RESUMEN", contenido_resumen)
                    self.progress.set(0.4)
                
                if self.incluir_indice.get():
                    self.crear_indice_profesional(doc)
                    self.progress.set(0.5)
                
                # Contenido principal din√°mico
                self.crear_contenido_dinamico_profesional(doc)
                self.progress.set(0.8)
                
                # Referencias
                self.crear_referencias_profesionales(doc)
                self.progress.set(0.9)
                
                # Guardar documento
                filename = filedialog.asksaveasfilename(
                    defaultextension=".docx",
                    filetypes=[("Word documents", "*.docx")],
                    title="Guardar Proyecto Acad√©mico Profesional"
                )
                
                if filename:
                    doc.save(filename)
                    self.progress.stop()
                    self.progress.set(1)
                    
                    # Mensaje de √©xito
                    self.validation_text.delete("1.0", "end")
                    self.validation_text.insert("1.0", 
                        f"üéâ ¬°DOCUMENTO PROFESIONAL GENERADO!\n\n"
                        f"üìÑ Archivo: {os.path.basename(filename)}\n"
                        f"üìç Ubicaci√≥n: {filename}\n\n"
                        f"‚úÖ CARACTER√çSTICAS APLICADAS:\n"
                        f"   ‚Ä¢ Formato profesional personalizado\n"
                        f"   ‚Ä¢ Niveles de esquema para √≠ndice autom√°tico\n"
                        f"   ‚Ä¢ Saltos de p√°gina entre secciones\n"
                        f"   ‚Ä¢ Control de l√≠neas viudas y hu√©rfanas\n"
                        f"   ‚Ä¢ Conservar t√≠tulos con contenido\n"
                        f"   ‚Ä¢ Fuente: {self.formato_config['fuente_texto']} {self.formato_config['tama√±o_texto']}pt\n"
                        f"   ‚Ä¢ T√≠tulos: {self.formato_config['fuente_titulo']} {self.formato_config['tama√±o_titulo']}pt\n"
                        f"   ‚Ä¢ Im√°genes: {'Personalizadas' if self.encabezado_personalizado or self.insignia_personalizada else 'Base'}\n\n"
                        f"‚úÖ Estructura profesional ({len(self.secciones_activas)} secciones)\n"
                        f"‚úÖ {len(self.referencias)} referencias APA\n"
                        f"‚úÖ Citas procesadas autom√°ticamente\n\n"
                        f"üìã PARA COMPLETAR EN WORD:\n"
                        f"   ‚Ä¢ Generar √≠ndice: Referencias > Tabla de contenido\n"
                        f"   ‚Ä¢ Agregar numeraci√≥n de p√°ginas si deseas\n"
                        f"   ‚Ä¢ Insertar tablas o figuras seg√∫n necesidad\n\n"
                        f"üöÄ ¬°Tu proyecto profesional est√° listo!"
                    )
                    
                    messagebox.showinfo("üéâ ¬°Documento Profesional Generado!", 
                        f"Documento creado exitosamente:\n{filename}\n\n"
                        f"Caracter√≠sticas aplicadas:\n"
                        f"‚Ä¢ Formato profesional con niveles de esquema\n"
                        f"‚Ä¢ Saltos de p√°gina autom√°ticos\n"
                        f"‚Ä¢ Control de l√≠neas profesional\n"
                        f"‚Ä¢ Im√°genes integradas\n"
                        f"‚Ä¢ Referencias APA autom√°ticas\n\n"
                        f"Para generar el √≠ndice autom√°tico:\n"
                        f"Referencias > Tabla de contenido > Autom√°tica")
                else:
                    self.progress.stop()
                    self.progress.set(0)
            
            except Exception as e:
                self.progress.stop()
                self.progress.set(0)
                messagebox.showerror("‚ùå Error", f"Error al generar documento:\n{str(e)}")
        
        thread = threading.Thread(target=generar)
        thread.daemon = True
        thread.start()
    
    def crear_agradecimientos_profesional(self, doc):
        """Crea p√°gina de agradecimientos con formato profesional"""
        p = doc.add_paragraph()
        p.style = doc.styles['Titulo Profesional']
        run = p.add_run("AGRADECIMIENTOS")
        run.bold = True
        run.font.name = self.formato_config['fuente_titulo']
        run.font.size = Pt(self.formato_config['tama√±o_titulo'])
        
        # Configurar como secci√≥n de nivel 1
        p.paragraph_format.outline_level = 0
        if self.formato_config['salto_pagina_secciones']:
            p.paragraph_format.page_break_before = True
        
        doc.add_paragraph()
        content_p = doc.add_paragraph("(Agregar agradecimientos personalizados aqu√≠)")
        content_p.style = doc.styles['Normal']
        doc.add_page_break()
    
    def crear_indice_profesional(self, doc):
        """Crea √≠ndice profesional con instrucciones"""
        p = doc.add_paragraph()
        p.style = doc.styles['Titulo Profesional']
        run = p.add_run("√çNDICE")
        run.bold = True
        run.font.name = self.formato_config['fuente_titulo']
        run.font.size = Pt(self.formato_config['tama√±o_titulo'])
        
        # Configurar como secci√≥n de nivel 1
        p.paragraph_format.outline_level = 0
        if self.formato_config['salto_pagina_secciones']:
            p.paragraph_format.page_break_before = True
        
        doc.add_paragraph()
        
        instrucciones = """INSTRUCCIONES PARA GENERAR √çNDICE AUTOM√ÅTICO:

1. En Word, ir a la pesta√±a "Referencias"
2. Hacer clic en "Tabla de contenido"
3. Seleccionar "Autom√°tica" o "Personalizada"
4. El √≠ndice se generar√° autom√°ticamente con todas las secciones

NOTA: Todas las secciones est√°n configuradas con Nivel de esquema 1 para 
facilitar la generaci√≥n autom√°tica del √≠ndice."""
        
        content_p = doc.add_paragraph(instrucciones)
        content_p.style = doc.styles['Normal']
        
        doc.add_paragraph()
        
        # Secci√≥n para tabla de ilustraciones
        p2 = doc.add_paragraph()
        run2 = p2.add_run("TABLA DE ILUSTRACIONES")
        run2.bold = True
        run2.font.name = self.formato_config['fuente_titulo']
        run2.font.size = Pt(self.formato_config['tama√±o_titulo'] - 2)
        p2.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        doc.add_paragraph("(Agregar manualmente si hay figuras, tablas o gr√°ficos)")
        doc.add_page_break()
    
    def procesar_citas(self, texto):
        """Alias para mantener compatibilidad"""
        return self.procesar_citas_completo(texto)
    
    def configurar_estilos_personalizados(self, doc):
        """Configura estilos con formato personalizado"""
        # Estilo normal
        style = doc.styles['Normal']
        style.font.name = self.formato_config['fuente_texto']
        style.font.size = Pt(self.formato_config['tama√±o_texto'])
        
        if self.formato_config['interlineado'] == 1.0:
            style.paragraph_format.line_spacing_rule = WD_LINE_SPACING.SINGLE
        elif self.formato_config['interlineado'] == 1.5:
            style.paragraph_format.line_spacing_rule = WD_LINE_SPACING.ONE_POINT_FIVE
        else:
            style.paragraph_format.line_spacing_rule = WD_LINE_SPACING.DOUBLE
        
        if self.formato_config['justificado']:
            style.paragraph_format.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
        
        if self.formato_config['sangria']:
            style.paragraph_format.first_line_indent = Inches(0.5)
        
        style.paragraph_format.space_after = Pt(0)
        
        # Estilo de t√≠tulos
        try:
            titulo_style = doc.styles.add_style('Titulo Personalizado', WD_STYLE_TYPE.PARAGRAPH)
        except:
            titulo_style = doc.styles['Heading 1']
        
        titulo_style.font.name = self.formato_config['fuente_titulo']
        titulo_style.font.size = Pt(self.formato_config['tama√±o_titulo'])
        titulo_style.font.bold = True
        titulo_style.paragraph_format.alignment = WD_ALIGN_PARAGRAPH.CENTER
        titulo_style.paragraph_format.space_before = Pt(12)
        titulo_style.paragraph_format.space_after = Pt(12)
    
    def crear_portada_personalizada(self, doc):
        """Crea portada con formato personalizado"""
        # Logo/emblema
        p = doc.add_paragraph()
        p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        p.add_run("LOGO/EMBLEMA DE LA INSTITUCI√ìN").bold = True
        
        doc.add_paragraph()
        doc.add_paragraph()
        
        # Instituci√≥n
        p = doc.add_paragraph()
        p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        run = p.add_run(self.proyecto_data['institucion'].get().upper())
        run.bold = True
        run.font.name = self.formato_config['fuente_titulo']
        run.font.size = Pt(self.formato_config['tama√±o_titulo'] + 2)
        
        doc.add_paragraph()
        
        # T√≠tulo del proyecto
        p = doc.add_paragraph()
        p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        run = p.add_run(f'"{self.proyecto_data["titulo"].get()}"')
        run.bold = True
        run.font.name = self.formato_config['fuente_titulo']
        run.font.size = Pt(self.formato_config['tama√±o_titulo'] + 4)
        
        doc.add_paragraph()
        doc.add_paragraph()
        
        # Informaci√≥n del proyecto
        info_fields = ['ciclo', 'curso', 'enfasis', 'area', 'categoria', 'director', 'responsable']
        labels = ['Ciclo', 'Curso', '√ânfasis', '√Årea de Desarrollo', 'Categor√≠a', 'Director', 'Responsable']
        
        for field, label in zip(info_fields, labels):
            if field in self.proyecto_data and self.proyecto_data[field].get().strip():
                p = doc.add_paragraph()
                p.alignment = WD_ALIGN_PARAGRAPH.CENTER
                run = p.add_run(f"{label}: {self.proyecto_data[field].get()}")
                run.font.name = self.formato_config['fuente_texto']
        
        # Estudiantes y tutores (igual que antes)
        doc.add_paragraph()
        
        if self.proyecto_data['estudiantes'].get():
            p = doc.add_paragraph()
            p.alignment = WD_ALIGN_PARAGRAPH.CENTER
            p.add_run("Estudiantes:").bold = True
            estudiantes = self.proyecto_data['estudiantes'].get().split(',')
            for estudiante in estudiantes:
                p = doc.add_paragraph()
                p.alignment = WD_ALIGN_PARAGRAPH.CENTER
                p.add_run(estudiante.strip())
        
        if self.proyecto_data['tutores'].get():
            p = doc.add_paragraph()
            p.alignment = WD_ALIGN_PARAGRAPH.CENTER
            p.add_run("Tutores:").bold = True
            tutores = self.proyecto_data['tutores'].get().split(',')
            for tutor in tutores:
                p = doc.add_paragraph()
                p.alignment = WD_ALIGN_PARAGRAPH.CENTER
                p.add_run(tutor.strip())
        
        doc.add_paragraph()
        doc.add_paragraph()
        
        # Fecha
        p = doc.add_paragraph()
        p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        p.add_run(f"A√±o: {datetime.now().year}")
        
        doc.add_page_break()
    
    def crear_contenido_dinamico(self, doc):
        """Crea contenido basado en secciones activas"""
        for seccion_id in self.secciones_activas:
            if seccion_id in self.secciones_disponibles:
                seccion = self.secciones_disponibles[seccion_id]
                
                if seccion['capitulo']:
                    # Es un t√≠tulo de cap√≠tulo
                    p = doc.add_paragraph()
                    p.alignment = WD_ALIGN_PARAGRAPH.CENTER
                    run = p.add_run(seccion['titulo'].replace('üìñ ', '').replace('üìö ', '').replace('üî¨ ', '').replace('üõ†Ô∏è ', '').replace('üìä ', '').replace('üí¨ ', ''))
                    run.bold = True
                    run.font.name = self.formato_config['fuente_titulo']
                    run.font.size = Pt(self.formato_config['tama√±o_titulo'])
                    doc.add_paragraph()
                else:
                    # Es contenido
                    if seccion_id in self.content_texts:
                        contenido = self.content_texts[seccion_id].get("1.0", "end").strip()
                        if contenido:
                            titulo_limpio = seccion['titulo']
                            # Remover emojis del t√≠tulo para el documento
                            titulo_limpio = re.sub(r'[^\w\s-]', '', titulo_limpio).strip()
                            self.crear_seccion_personalizada(doc, titulo_limpio.upper(), contenido)
    
    def crear_seccion_personalizada(self, doc, titulo, contenido):
        """Crea una secci√≥n con formato personalizado"""
        # T√≠tulo de la secci√≥n
        p = doc.add_paragraph()
        p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        run = p.add_run(titulo)
        run.bold = True
        run.font.name = self.formato_config['fuente_titulo']
        run.font.size = Pt(self.formato_config['tama√±o_titulo'])
        
        # Contenido procesado
        contenido_procesado = self.procesar_citas(contenido.strip())
        if contenido_procesado:
            p = doc.add_paragraph(contenido_procesado)
            # Aplicar formato personalizado
            p.style = doc.styles['Normal']
            
        doc.add_paragraph()  # Espaciado
    
    def crear_agradecimientos(self, doc):
        """Crea la p√°gina de agradecimientos"""
        p = doc.add_paragraph()
        p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        run = p.add_run("AGRADECIMIENTOS")
        run.bold = True
        run.font.name = self.formato_config['fuente_titulo']
        run.font.size = Pt(self.formato_config['tama√±o_titulo'])
        
        doc.add_paragraph()
        doc.add_paragraph("(Agregar agradecimientos manualmente)")
        doc.add_page_break()
    
    def crear_seccion(self, doc, titulo, contenido):
        """Crear secci√≥n con formato base"""
        self.crear_seccion_personalizada(doc, titulo, contenido)
    
    def crear_indice(self, doc):
        """Crea el √≠ndice"""
        p = doc.add_paragraph()
        p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        run = p.add_run("√çNDICE")
        run.bold = True
        run.font.name = self.formato_config['fuente_titulo']
        run.font.size = Pt(self.formato_config['tama√±o_titulo'])
        
        doc.add_paragraph()
        doc.add_paragraph("(El √≠ndice se debe generar manualmente en Word usando Referencias > Tabla de contenido)")
        doc.add_paragraph()
        doc.add_paragraph("TABLA DE ILUSTRACIONES")
        doc.add_paragraph("(Agregar manualmente si hay figuras o tablas)")
        doc.add_page_break()
    
    def crear_referencias_apa(self, doc):
        """Crea referencias con formato personalizado"""
        if not self.referencias:
            return
        
        # T√≠tulo
        p = doc.add_paragraph()
        p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        run = p.add_run("REFERENCIAS")
        run.bold = True
        run.font.name = self.formato_config['fuente_titulo']
        run.font.size = Pt(self.formato_config['tama√±o_titulo'])
        
        doc.add_paragraph()
        
        # Ordenar referencias alfab√©ticamente
        referencias_ordenadas = sorted(self.referencias, key=lambda x: x['autor'])
        
        for ref in referencias_ordenadas:
            ref_text = f"{ref['autor']} ({ref['a√±o']}). {ref['titulo']}. {ref['fuente']}"
            p = doc.add_paragraph(ref_text)
            p.paragraph_format.first_line_indent = Inches(-0.5)
            p.paragraph_format.left_indent = Inches(0.5)
            p.style = doc.styles['Normal']
    
    def mostrar_bienvenida(self):
        """Muestra mensaje de bienvenida mejorado con atajos de teclado"""
        self.root.after(1000, lambda: messagebox.showinfo(
            "üéì ¬°Generador Profesional!",
            "Generador de Proyectos Acad√©micos - Versi√≥n Profesional\n\n"
            "üÜï CARACTER√çSTICAS AVANZADAS:\n"
            "‚Ä¢ Formato profesional con niveles de esquema\n"
            "‚Ä¢ Auto-guardado cada 5 minutos\n"
            "‚Ä¢ Estad√≠sticas en tiempo real\n"
            "‚Ä¢ Sistema de guardado/carga completo\n"
            "‚Ä¢ Gesti√≥n avanzada de im√°genes\n"
            "‚Ä¢ Exportaci√≥n de configuraciones\n\n"
            "‚å®Ô∏è ATAJOS DE TECLADO:\n"
            "‚Ä¢ Ctrl+S: Guardar proyecto\n"
            "‚Ä¢ Ctrl+O: Cargar proyecto\n"
            "‚Ä¢ Ctrl+N: Nuevo proyecto\n"
            "‚Ä¢ F5: Validar proyecto\n"
            "‚Ä¢ F9: Generar documento\n"
            "‚Ä¢ Ctrl+Q: Salir\n\n"
            "üöÄ ¬°Crea proyectos profesionales √∫nicos!"
        ))
    
    def mostrar_instrucciones(self):
        """Muestra gu√≠a completa actualizada con nuevas caracter√≠sticas"""
        instruc_window = ctk.CTkToplevel(self.root)
        instruc_window.title("üìñ Gu√≠a Profesional Completa")
        instruc_window.geometry("1000x800")
        
        main_frame = ctk.CTkFrame(instruc_window, corner_radius=0)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        title_label = ctk.CTkLabel(
            main_frame, text="üìñ GU√çA PROFESIONAL COMPLETA",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        title_label.pack(pady=(20, 10))
        
        instruc_text = ctk.CTkTextbox(main_frame, wrap="word", font=ctk.CTkFont(size=12))
        instruc_text.pack(expand=True, fill="both", padx=20, pady=(10, 20))
        
        instrucciones = """
üéì GENERADOR PROFESIONAL DE PROYECTOS ACAD√âMICOS - VERSI√ìN 2.0

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üöÄ CARACTER√çSTICAS PROFESIONALES AVANZADAS:
‚Ä¢ Formato Word con niveles de esquema para √≠ndices autom√°ticos
‚Ä¢ Saltos de p√°gina inteligentes entre secciones principales
‚Ä¢ Control profesional de l√≠neas viudas y hu√©rfanas
‚Ä¢ Sistema completo de guardado/carga de proyectos
‚Ä¢ Auto-guardado autom√°tico cada 5 minutos
‚Ä¢ Estad√≠sticas en tiempo real (palabras, secciones, referencias)
‚Ä¢ Exportaci√≥n/importaci√≥n de configuraciones
‚Ä¢ Gesti√≥n avanzada de im√°genes personalizadas
‚Ä¢ Atajos de teclado para flujo de trabajo eficiente

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚å®Ô∏è ATAJOS DE TECLADO PROFESIONALES:
‚Ä¢ Ctrl+S: Guardar proyecto completo
‚Ä¢ Ctrl+O: Cargar proyecto existente
‚Ä¢ Ctrl+N: Crear nuevo proyecto
‚Ä¢ F5: Validar proyecto r√°pidamente
‚Ä¢ F9: Generar documento final
‚Ä¢ Ctrl+Q: Salir de la aplicaci√≥n

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üíæ SISTEMA DE PROYECTOS:

üîπ GUARDAR PROYECTO (Ctrl+S):
‚Ä¢ Guarda TODA la informaci√≥n del proyecto
‚Ä¢ Incluye contenido, configuraci√≥n, im√°genes, referencias
‚Ä¢ Formato JSON para m√°xima compatibilidad
‚Ä¢ Permite reanudar trabajo exactamente donde lo dejaste

üîπ CARGAR PROYECTO (Ctrl+O):
‚Ä¢ Restaura proyecto completo
‚Ä¢ Mantiene estructura personalizada
‚Ä¢ Compatible con versiones anteriores
‚Ä¢ Validaci√≥n autom√°tica de integridad

üîπ AUTO-GUARDADO:
‚Ä¢ Backup autom√°tico cada 5 minutos en "auto_save.json"
‚Ä¢ Recuperaci√≥n autom√°tica en caso de cierre inesperado
‚Ä¢ No interrumpe el flujo de trabajo

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìä ESTAD√çSTICAS EN TIEMPO REAL:

El panel superior muestra constantemente:
‚Ä¢ üìä Palabras totales escritas
‚Ä¢ üìù Secciones completadas vs total
‚Ä¢ üìö Referencias bibliogr√°ficas agregadas
‚Ä¢ Actualizaci√≥n autom√°tica cada 2 segundos

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üñºÔ∏è GESTI√ìN AVANZADA DE IM√ÅGENES:

üîπ IM√ÅGENES BASE:
‚Ä¢ Coloca en /Recursos/Encabezado.png (15cm x 2.5cm)
‚Ä¢ Coloca en /Recursos/Insignia.png (3cm x 3cm)
‚Ä¢ Detecci√≥n autom√°tica al iniciar

üîπ IM√ÅGENES PERSONALIZADAS:
‚Ä¢ Bot√≥n "üñºÔ∏è Im√°genes" para gesti√≥n completa
‚Ä¢ Carga im√°genes espec√≠ficas por proyecto
‚Ä¢ Prioridad sobre im√°genes base
‚Ä¢ Validaci√≥n autom√°tica de formatos y tama√±os
‚Ä¢ Integraci√≥n perfecta en documento final

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìÑ FORMATO PROFESIONAL WORD:

üîπ NIVELES DE ESQUEMA:
‚Ä¢ Todos los t√≠tulos configurados como Nivel 1
‚Ä¢ √çndice autom√°tico en Word: Referencias > Tabla de contenido
‚Ä¢ Navegaci√≥n r√°pida por documento
‚Ä¢ Estructura profesional garantizada

üîπ CONTROL DE P√ÅRRAFOS:
‚Ä¢ Saltos de p√°gina antes de secciones principales
‚Ä¢ "Conservar con el siguiente" para t√≠tulos
‚Ä¢ Control de l√≠neas viudas y hu√©rfanas
‚Ä¢ Conservar l√≠neas juntas para coherencia

üîπ FORMATO APA AUTOM√ÅTICO:
‚Ä¢ Sangr√≠a francesa en referencias (1.27cm)
‚Ä¢ Interlineado doble configurable
‚Ä¢ Justificaci√≥n autom√°tica
‚Ä¢ M√°rgenes est√°ndar (2.54cm)

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìö SISTEMA DE CITAS PROFESIONAL:

üî• TIPOS SOPORTADOS:

üìù Cita textual corta:
"El conocimiento es poder" [CITA:textual:Bacon:1597:25]
‚Üí "El conocimiento es poder" (Bacon, 1597, p. 25)

üîÑ Parafraseo:
Los estudios demuestran mejoras [CITA:parafraseo:Garc√≠a:2020]
‚Üí Los estudios demuestran mejoras (Garc√≠a, 2020)

üìñ Cita textual larga (m√°s de 40 palabras):
Su extensa reflexi√≥n sobre el tema [CITA:larga:Autor:2021:45]
‚Üí Formato de bloque independiente con sangr√≠a

üë• M√∫ltiples autores:
Investigaciones recientes [CITA:multiple:Garc√≠a y L√≥pez:2020]
‚Üí Investigaciones recientes (Garc√≠a y L√≥pez, 2020)

üåê Fuentes web:
Seg√∫n datos oficiales [CITA:web:OMS:2023]
‚Üí Seg√∫n datos oficiales (OMS, 2023)

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üõ†Ô∏è GESTI√ìN DIN√ÅMICA DE SECCIONES:

üîπ OPERACIONES DISPONIBLES:
‚Ä¢ ‚ûï Agregar: Crea secciones completamente personalizadas
‚Ä¢ ‚ûñ Quitar: Elimina secciones (protege las requeridas)
‚Ä¢ ‚úèÔ∏è Editar: Modifica t√≠tulos, instrucciones y propiedades
‚Ä¢ ‚¨ÜÔ∏è‚¨áÔ∏è Reordenar: Cambia orden de aparici√≥n en documento

üîπ TIPOS DE SECCIONES:
‚Ä¢ üìñ Cap√≠tulos: Solo t√≠tulos organizacionales (azul)
‚Ä¢ üìù Contenido: Secciones con texto (blanco)
‚Ä¢ ‚ö†Ô∏è Requeridas: Obligatorias para validaci√≥n (amarillo)
‚Ä¢ üé® Personalizadas: Creadas seg√∫n tus necesidades

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üé® FORMATO COMPLETAMENTE PERSONALIZABLE:

üîπ TIPOGRAF√çA:
‚Ä¢ Fuentes independientes para texto y t√≠tulos
‚Ä¢ Tama√±os espec√≠ficos (10-18pt)
‚Ä¢ Familias: Times New Roman, Arial, Calibri, etc.

üîπ ESPACIADO:
‚Ä¢ Interlineado: 1.0, 1.5, 2.0, 2.5
‚Ä¢ M√°rgenes: 2.0-3.5 cm
‚Ä¢ Sangr√≠a primera l√≠nea configurable

üîπ OPCIONES PROFESIONALES:
‚Ä¢ Saltos de p√°gina entre secciones
‚Ä¢ Conservar t√≠tulos con contenido
‚Ä¢ Control de l√≠neas viudas y hu√©rfanas
‚Ä¢ Justificaci√≥n autom√°tica

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üì§ EXPORTACI√ìN DE CONFIGURACIONES:

üîπ CASOS DE USO:
‚Ä¢ Crear plantillas departamentales
‚Ä¢ Compartir configuraciones entre proyectos
‚Ä¢ Backup de configuraciones favoritas
‚Ä¢ Estandarizaci√≥n institucional

üîπ CONTENIDO EXPORTADO:
‚Ä¢ Configuraci√≥n completa de formato
‚Ä¢ Estructura de secciones personalizada
‚Ä¢ Orden y propiedades de secciones
‚Ä¢ Compatible entre versiones

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

ü§ñ TRABAJANDO CON IA AVANZADO:

Para m√°xima eficiencia con IA como Claude:

üìù SOLICITUDES ESTRUCTURADAS:
"Escr√≠beme el marco te√≥rico sobre [tema] organizado en 4 subsecciones:
1. Antecedentes hist√≥ricos
2. Teor√≠as principales  
3. Estudios recientes
4. Debates actuales

Incluye citas usando [CITA:parafraseo:Autor:A√±o] y [CITA:textual:Autor:A√±o:P√°gina].
Estructura cada subsecci√≥n con 200-300 palabras."

üéØ OBJETIVOS ESPEC√çFICOS:
"Dame 6 objetivos espec√≠ficos para investigar [problema] usando estos verbos:
‚Ä¢ Identificar (poblaci√≥n objetivo)
‚Ä¢ Comparar (metodolog√≠as) 
‚Ä¢ Analizar (resultados)
‚Ä¢ Evaluar (impacto)
‚Ä¢ Determinar (factores)
‚Ä¢ Proponer (soluciones)

Cada objetivo debe ser medible y alcanzable."

üí¨ DISCUSI√ìN AVANZADA:
"Redacta la discusi√≥n comparando estos resultados [datos] con:
1. Teor√≠a de [autor principal]
2. Estudios similares de [autores secundarios]
3. Limitaciones encontradas
4. Implicaciones pr√°cticas

Incluye citas de contraste usando el formato del generador."

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üîç VALIDACI√ìN INTELIGENTE AVANZADA:

üéØ CRITERIOS EVALUADOS:
‚Ä¢ Campos obligatorios completos
‚Ä¢ Secciones requeridas con contenido m√≠nimo (50 caracteres)
‚Ä¢ Detecci√≥n de citas en marco te√≥rico
‚Ä¢ Verificaci√≥n de referencias bibliogr√°ficas
‚Ä¢ Coherencia entre objetivos y contenido
‚Ä¢ Estructura l√≥gica de secciones

üìä M√âTRICAS MOSTRADAS:
‚Ä¢ Progreso general del proyecto (0-100%)
‚Ä¢ Secciones completadas vs requeridas
‚Ä¢ Estad√≠sticas de contenido
‚Ä¢ Estado de configuraci√≥n aplicada
‚Ä¢ Recomendaciones de mejora espec√≠ficas

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üí° FLUJO DE TRABAJO PROFESIONAL RECOMENDADO:

üîÑ INICIO DE PROYECTO:
1. Crear nuevo proyecto (Ctrl+N)
2. Configurar formato personalizado
3. Cargar/configurar im√°genes institucionales
4. Organizar estructura de secciones
5. Completar informaci√≥n general

üìù DESARROLLO:
1. Escribir secci√≥n por secci√≥n siguiendo instrucciones
2. Usar sistema de citas consistentemente
3. Agregar referencias mientras escribes
4. Guardar frecuentemente (Ctrl+S)
5. Validar regularmente (F5)

üéØ FINALIZACI√ìN:
1. Validaci√≥n final completa
2. Revisi√≥n de estad√≠sticas
3. Generaci√≥n de documento (F9)
4. Verificaci√≥n en Word
5. Generar √≠ndice autom√°tico

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üèÜ CARACTER√çSTICAS √öNICAS DEL GENERADOR:

‚úÖ PROFESIONALISMO TOTAL:
‚Ä¢ Cumple est√°ndares acad√©micos internacionales
‚Ä¢ Formato compatible con universidades
‚Ä¢ Estructura adaptable a cualquier disciplina
‚Ä¢ Calidad profesional garantizada

‚úÖ EFICIENCIA M√ÅXIMA:
‚Ä¢ Automatiza formateo tedioso
‚Ä¢ Reduce tiempo de creaci√≥n 80%
‚Ä¢ Elimina errores de formato
‚Ä¢ Permite enfoque en contenido de calidad

‚úÖ FLEXIBILIDAD ABSOLUTA:
‚Ä¢ Adaptable a cualquier tipo de proyecto
‚Ä¢ Personalizaci√≥n total del formato
‚Ä¢ Estructura din√°mica seg√∫n necesidades
‚Ä¢ Compatible con m√∫ltiples estilos institucionales

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üöÄ ¬°AHORA PUEDES CREAR PROYECTOS DE NIVEL PROFESIONAL!

Este generador avanzado combina la potencia de automatizaci√≥n con la flexibilidad 
necesaria para crear documentos acad√©micos de la m√°s alta calidad. 

Experimenta con las diferentes configuraciones y encuentra el formato perfecto 
para tu instituci√≥n y tipo de proyecto.

¬°El futuro de la creaci√≥n de documentos acad√©micos est√° aqu√≠!
        """
        
        instruc_text.insert("1.0", instrucciones)
        instruc_text.configure(state="disabled")
    
    def run(self):
        """Ejecuta la aplicaci√≥n"""
        self.root.mainloop()

class SeccionDialog:
    """Di√°logo para agregar/editar secciones"""
    def __init__(self, parent, secciones_existentes, editar=False, seccion_actual=None):
        self.result = None
        self.secciones_existentes = secciones_existentes
        self.editar = editar
        self.seccion_actual = seccion_actual
        
        # Crear ventana de di√°logo
        titulo = "‚úèÔ∏è Editar Secci√≥n" if editar else "‚ûï Agregar Nueva Secci√≥n"
        self.dialog = ctk.CTkToplevel(parent)
        self.dialog.title(titulo)
        self.dialog.geometry("550x450")
        self.dialog.transient(parent)
        self.dialog.grab_set()
        
        # Centrar ventana
        self.dialog.update_idletasks()
        x = (self.dialog.winfo_screenwidth() // 2) - (550 // 2)
        y = (self.dialog.winfo_screenheight() // 2) - (450 // 2)
        self.dialog.geometry(f"550x450+{x}+{y}")
        
        self.setup_dialog()
        
        # Cargar datos si es edici√≥n
        if editar and seccion_actual:
            self.cargar_datos_existentes()
    
    def setup_dialog(self):
        """Configura el di√°logo"""
        main_frame = ctk.CTkFrame(self.dialog, corner_radius=0)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo
        titulo_texto = "‚úèÔ∏è Editar Secci√≥n Existente" if self.editar else "‚ûï Crear Nueva Secci√≥n"
        title_label = ctk.CTkLabel(
            main_frame, text=titulo_texto,
            font=ctk.CTkFont(size=18, weight="bold")
        )
        title_label.pack(pady=(10, 20))
        
        # Campos
        fields_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        fields_frame.pack(fill="x", padx=20, pady=(0, 20))
        
        # ID √∫nico
        ctk.CTkLabel(fields_frame, text="ID √∫nico:", font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 5))
        self.id_entry = ctk.CTkEntry(fields_frame, placeholder_text="ejemplo: mi_seccion_personalizada")
        self.id_entry.pack(fill="x", pady=(0, 15))
        
        # T√≠tulo
        ctk.CTkLabel(fields_frame, text="T√≠tulo:", font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 5))
        self.titulo_entry = ctk.CTkEntry(fields_frame, placeholder_text="üìù Mi Nueva Secci√≥n")
        self.titulo_entry.pack(fill="x", pady=(0, 15))
        
        # Instrucci√≥n
        ctk.CTkLabel(fields_frame, text="Instrucci√≥n:", font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 5))
        self.instruccion_text = ctk.CTkTextbox(fields_frame, height=80)
        self.instruccion_text.insert("1.0", "Describe qu√© debe contener esta secci√≥n...")
        self.instruccion_text.pack(fill="x", pady=(0, 15))
        
        # Opciones
        options_frame = ctk.CTkFrame(fields_frame, fg_color="gray20", corner_radius=10)
        options_frame.pack(fill="x", pady=(0, 20))
        
        ctk.CTkLabel(options_frame, text="‚öôÔ∏è Opciones de Secci√≥n:", font=ctk.CTkFont(weight="bold")).pack(pady=(10, 5))
        
        self.es_capitulo = ctk.CTkCheckBox(options_frame, text="üìñ Es t√≠tulo de cap√≠tulo (solo organizacional)")
        self.es_capitulo.pack(anchor="w", padx=20, pady=5)
        
        self.es_requerida = ctk.CTkCheckBox(options_frame, text="‚ö†Ô∏è Secci√≥n requerida (obligatoria para validaci√≥n)")
        self.es_requerida.pack(anchor="w", padx=20, pady=5)
        
        # Informaci√≥n adicional
        info_text = """üí° INFORMACI√ìN:
‚Ä¢ ID √∫nico: Identificador interno (sin espacios, usar guiones bajos)
‚Ä¢ T√≠tulo: Nombre que aparecer√° en pesta√±as y documento
‚Ä¢ Instrucci√≥n: Gu√≠a para el usuario sobre qu√© escribir
‚Ä¢ Cap√≠tulo: Solo aparece como t√≠tulo organizacional, sin contenido
‚Ä¢ Requerida: Se valida que tenga contenido antes de generar"""
        
        info_label = ctk.CTkLabel(
            options_frame, text=info_text, font=ctk.CTkFont(size=10),
            justify="left", wraplength=450
        )
        info_label.pack(padx=15, pady=(5, 15))
        
        # Botones
        btn_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        btn_frame.pack(fill="x", pady=(0, 10))
        
        cancel_btn = ctk.CTkButton(
            btn_frame, text="‚ùå Cancelar", command=self.cancelar,
            fg_color="red", hover_color="darkred", width=120
        )
        cancel_btn.pack(side="left", padx=(20, 10))
        
        action_text = "‚úÖ Actualizar Secci√≥n" if self.editar else "‚úÖ Crear Secci√≥n"
        create_btn = ctk.CTkButton(
            btn_frame, text=action_text, command=self.procesar_seccion,
            fg_color="green", hover_color="darkgreen", width=150
        )
        create_btn.pack(side="right", padx=(10, 20))
    
    def cargar_datos_existentes(self):
        """Carga los datos de la secci√≥n existente para editar"""
        if self.seccion_actual:
            seccion_id, seccion_data = self.seccion_actual
            
            self.id_entry.delete(0, "end")
            self.id_entry.insert(0, seccion_id)
            
            self.titulo_entry.delete(0, "end")
            self.titulo_entry.insert(0, seccion_data['titulo'])
            
            self.instruccion_text.delete("1.0", "end")
            self.instruccion_text.insert("1.0", seccion_data['instruccion'])
            
            if seccion_data['capitulo']:
                self.es_capitulo.select()
            
            if seccion_data['requerida']:
                self.es_requerida.select()
    
    def procesar_seccion(self):
        """Procesa la creaci√≥n o edici√≥n de la secci√≥n"""
        seccion_id = self.id_entry.get().strip()
        titulo = self.titulo_entry.get().strip()
        instruccion = self.instruccion_text.get("1.0", "end").strip()
        
        if not all([seccion_id, titulo, instruccion]):
            messagebox.showerror("‚ùå Error", "Completa todos los campos obligatorios")
            return
        
        # Validar ID √∫nico (solo si no es edici√≥n o cambi√≥ el ID)
        if not self.editar or (self.editar and seccion_id != self.seccion_actual[0]):
            if seccion_id in self.secciones_existentes:
                messagebox.showerror("‚ùå Error", "Ya existe una secci√≥n con ese ID")
                return
        
        # Validar formato del ID
        if not re.match(r'^[a-z0-9_]+$', seccion_id):
            messagebox.showerror("‚ùå Error", 
                "El ID debe contener solo letras min√∫sculas, n√∫meros y guiones bajos")
            return
        
        seccion_data = {
            'titulo': titulo,
            'instruccion': instruccion,
            'requerida': self.es_requerida.get(),
            'capitulo': self.es_capitulo.get()
        }
        
        self.result = (seccion_id, seccion_data)
        self.dialog.destroy()
    
    def cancelar(self):
        """Cancela la operaci√≥n"""
        self.dialog.destroy()

def main():
    app = ProyectoAcademicoGenerator()
    app.run()

if __name__ == "__main__":
    main()